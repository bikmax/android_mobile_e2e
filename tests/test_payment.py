import re
import time
import traceback

from selenium.webdriver.support import expected_conditions as EC

import allure
import pytest
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait

import ResultCollector
from core.pages.main_page import MainPage
from core.data.test_data import TestData
from reporting.TelegramReport import TelegramReport
from core.api.AuthController import AuthController
from core.pages.base_test import BaseTest
from ResultCollector import ResultCollector
import pytest
import allure
import time


class PaymentTests(BaseTest):
    @pytest.mark.regress
    @pytest.mark.payment_tests
    @allure.story("Test Case: –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —É–∂–µ –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è")
    def test_complete_payment_for_existing_donated_wish(self):
        #TelegramReport.send_tg("START 0")
        status = "üü°"
        bug_link = "/-/issues/3237"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–û–ø–ª–∞—Ç–∞: –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —É–∂–µ –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"
        test_ss_name = "test_complete_payment_for_existing_donated_wish"
        main_page_1 = MainPage(self.driver)
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, TestData.friend1_name, "11", "1111")

        try:
            # Auth
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è
            main_page_1.add_two_wishes()

            # donate to gift 1
            with allure.step("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"):
                time.sleep(5)
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                # TelegramReport.send_tg("click(MainPage.CATALOG_BOTTOM_BUTTON_BOUNDS)")
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.MY_WISHES_FIRST_WISH)
                # main_page_1.click_by_uiautomator(TestData.my_wish_first_wish)
                time.sleep(6)

            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.scroll_until_visible(self.driver, MainPage.PAY_FOR_WISH_BUTTON)
                time.sleep(5)
                main_page_1.click(MainPage.PAY_FOR_WISH_BUTTON)
                # TelegramReport.send_tg("PAY_FOR_WISH_BUTTON clicked on phone 1")

            with allure.step("–í–≤–æ–¥ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã"):
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.PAYMENT_DONATE_MONEY_AMOUNT_FIELD)
                # TelegramReport.send_tg("click(MainPage.payment_money_amount_filed)")
                time.sleep(2)
                main_page_1.send_keys_simple("100")
                time.sleep(2)
                self.driver.hide_keyboard()
                time.sleep(1)

            with allure.step("–û–ø–ª–∞—Ç–∏—Ç—å"):
                main_page_1.scroll_until_visible(self.driver, MainPage.PAY_GO_TO_PAYMENT_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.PAY_GO_TO_PAYMENT_BUTTON)
                # TelegramReport.send_tg("PAY_GO_TO_PAYMENT_BUTTON clicked on phone 1")

            # PAY
            main_page_1.pay_by_card()

            # donate to gift 2
            with allure.step("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"):
                time.sleep(5)
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                # TelegramReport.send_tg("click(MainPage.CATALOG_BOTTOM_BUTTON_BOUNDS)")
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.MY_WISHES_FIRST_WISH)
                time.sleep(6)

            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.scroll_until_visible(self.driver, MainPage.PAY_FOR_WISH_BUTTON)
                time.sleep(5)
                main_page_1.click(MainPage.PAY_FOR_WISH_BUTTON)
                # TelegramReport.send_tg("PAY_FOR_WISH_BUTTON clicked on phone 1")

            with allure.step("–í–≤–æ–¥ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã"):
                time.sleep(5)
                main_page_1.is_element_visible(TestData.PAYMENT_DONATE_SET_FULL_AMOUNT_BTN)
                main_page_1.click_by_uiautomator(TestData.PAYMENT_DONATE_SET_FULL_AMOUNT_BTN)
                # TelegramReport.send_tg("click(MainPage.payment_money_amount_filed)")
                time.sleep(2)

            with allure.step("–û–ø–ª–∞—Ç–∏—Ç—å"):
                main_page_1.scroll_until_visible(self.driver, MainPage.PAY_GO_TO_PAYMENT_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.PAY_GO_TO_PAYMENT_BUTTON)

            # PAY
            main_page_1.pay_by_card()
            time.sleep(30)
            main_page_1.is_element_visible(TestData.BOTTOM_WISHES_BTN)
            main_page_1.click(TestData.BOTTOM_WISHES_BTN)
            main_page_1.scroll_until_visible(self.driver, TestData.WISHES_100_FULL)
            main_page_1.is_element_visible(TestData.WISHES_100_FULL)

            status = "üü¢"
        except Exception as e:
            status = "üü°"
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)
            raise e
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)


    @pytest.mark.regress
    @pytest.mark.payment_tests
    @allure.story("–¢–µ—Å—Ç: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ —á–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_wish_partial_payment(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ —á–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞"""
        #TelegramReport.send_tg("START 1")

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–û–ø–ª–∞—Ç–∞: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ —á–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞"
        test_ss_name = "test_wish_partial_payment"
        main_page_1 = MainPage(self.driver)
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "20", "1111")

        try:
            # Auth
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è
            main_page_1.add_two_wishes()

            # donate to gift
            with allure.step("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"):
                time.sleep(5)
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.MY_WISHES_FIRST_WISH)
                time.sleep(6)

            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.scroll_until_visible(self.driver, MainPage.PAY_FOR_WISH_BUTTON)
                time.sleep(5)
                main_page_1.click(MainPage.PAY_FOR_WISH_BUTTON)

            with allure.step("–í–≤–æ–¥ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã"):
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.PAYMENT_DONATE_MONEY_AMOUNT_FIELD)
                time.sleep(2)
                main_page_1.send_keys_simple("100")
                time.sleep(2)
                self.driver.hide_keyboard()

            with allure.step("–û–ø–ª–∞—Ç–∏—Ç—å"):
                main_page_1.scroll_until_visible(self.driver, MainPage.PAY_GO_TO_PAYMENT_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.PAY_GO_TO_PAYMENT_BUTTON)

            # PAY
            main_page_1.pay_by_card()

            # Screenshot block
            time.sleep(2)
            action_taken = "_wish_payed_confirm"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∂–µ–ª–∞–Ω–∏—è"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∂–µ–ª–∞–Ω–∏—è"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"
            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)


    @pytest.mark.regress
    @pytest.mark.payment_tests
    @allure.story("Test Case: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_add_wish_and_complete_payment_with_delivery(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"""
        #TelegramReport.send_tg("START 2")
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–û–ø–ª–∞—Ç–∞: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"
        test_ss_name = "test_add_wish_and_complete_payment_with_delivery"
        main_page_1 = MainPage(self.driver)
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ResultCollector –¥–æ try/except
        collector = ResultCollector()

        # Authenticate and delete users before the test
        time.sleep(20)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "20", "1111")
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "40", "1111")

        try:
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è
            main_page_1.add_two_wishes()

            # –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
            with allure.step("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"):
                time.sleep(3)
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)

            with allure.step("–í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.MY_WISHES_FIRST_WISH)

            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏—Ç—å'"):
                time.sleep(3)
                main_page_1.scroll_until_visible(self.driver, MainPage.PAY_FOR_WISH_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.PAY_FOR_WISH_BUTTON)

            with allure.step("–ò—Å–ø–æ–ª–Ω–∏—Ç—å —á–µ–∫–±–æ–∫—Å"):
                time.sleep(3)
                main_page_1.click_by_uiautomator(TestData.PAYMENT_CHOOSE_FULL_PAYMENT_OPTION)

            with allure.step("–ò—Å–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∞"):
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.PAYMENT_EXECUTE_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.PAYMENT_EXECUTE_BUTTON)

            # –î–æ—Å—Ç–∞–≤–∫–∞
            with allure.step("–í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è"):
                time.sleep(3)
                main_page_1.click_by_uiautomator(TestData.DELIVERY_CHOOSE_RECIPIENT)
                time.sleep(3)
                main_page_1.click_by_uiautomator(TestData.RECIPIENT_CHOOSE_USER)
                time.sleep(3)
                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(3)

            with allure.step("–í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"):
                time.sleep(3)
                main_page_1.click_by_uiautomator(TestData.DELIVERY_CHOOSE_PICKUP_POINT)
                time.sleep(5)
                main_page_1.turn_on_gps()
                main_page_1.click_by_uiautomator(TestData.DELIVERY_PICKUP_POINT_SEARCH_FIELD)
                time.sleep(3)
                main_page_1.copy_paste_simple("–ú–æ—Å–∫–≤–∞ 2-–π —Ö–≤–æ—Å—Ç–æ–≤ –ø–µ—Ä–µ—É–ª–æ–∫ 12")
                time.sleep(4)
                main_page_1.click_by_uiautomator(TestData.DELIVERY_PICKUP_POINT_SEARCH_RESULT_1)
                time.sleep(6)
                main_page_1.click(MainPage.DELIVERY_FOUND_SELECTED_PICKUP_POINT_CHOOSE_BUTTON)

            with allure.step("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"):
                time.sleep(4)
                main_page_1.scroll_until_visible(self.driver, MainPage.PAY_GO_TO_PAYMENT_BUTTON)
                main_page_1.click(MainPage.PAY_GO_TO_PAYMENT_BUTTON)

            # –®–∞–≥–∏ —Å –∫–∞—Ä—Ç–æ–π
            with allure.step("–æ–ø–ª–∞—Ça card"):
                main_page_1.pay_by_card()

            # Screenshot –±–ª–æ–∫
            time.sleep(4)
            action_taken = "_payment_complete"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (–æ–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)

            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)


    @pytest.mark.regress
    @pytest.mark.payment_tests
    def test_friend_wish_partial_payment(self):
        """–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∞"""
        #TelegramReport.send_tg("START 3")
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–û–ø–ª–∞—Ç–∞: –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∞"
        test_ss_name = "test_friend_wish_partial_payment"
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend3)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend3, "Treti", "13", "1111")

        try:
            # Auth
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è
            main_page_1.add_two_wishes()

            main_page_1.logout(self)
            # Auth 2
            main_page_1.auth_by_phone(TestData.phone_friend2, TestData.confirm_code)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∂–µ–ª–∞–Ω–∏–µ –¥—Ä—É–≥–∞
            with allure.step("–û—Ç–∫—Ä—ã—Ç–∏–µ –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∞"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(2)
                main_page_1.swipe_up(800)
                time.sleep(2)
                main_page_1.click(TestData.FRIEND_WISH_1)
                time.sleep(2)

            # –î–æ–Ω–∞—Ç –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫
            with allure.step("–î–æ–Ω–∞—Ç –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫"):
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.CONTRIBUTE_FOR_WISH_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.CONTRIBUTE_FOR_WISH_BUTTON)
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.PAYMENT_DONATE_MONEY_AMOUNT_FIELD)
                time.sleep(2)
                main_page_1.send_keys_simple("100")
                time.sleep(1)
                self.driver.hide_keyboard()
                time.sleep(1)
                main_page_1.scroll_until_visible(self.driver, MainPage.PAY_GO_TO_PAYMENT_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.PAY_GO_TO_PAYMENT_BUTTON)

                main_page_1.pay_by_card()

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)


    @pytest.mark.regress
    @pytest.mark.payment_tests
    @allure.story("Test Case: –û–ø–ª–∞—Ç–∞ –∂–µ–ª–∞–Ω–∏–π –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_suggest_wish_and_complete_payment_with_delivery(self):
        """–¢–µ—Å—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∂–µ–ª–∞–Ω–∏–π –¥—Ä—É–≥–∞, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Å –ø–æ–ª–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π"""
        #TelegramReport.send_tg("START 4")
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url",
                                                  "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ - —É—Å–ø–µ—Ö
        test_ss_name = "test_suggest_wish_and_complete_payment_with_delivery"  # –ò–º—è —Ç–µ—Å—Ç–∞
        test_name_this = "–û–ø–ª–∞—Ç–∞: –ñ–µ–ª–∞–Ω–∏–µ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞"
        main_page_1 = MainPage(self.driver)  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        auth_controller = AuthController()
        start_time = time.time()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend3)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend3, "Treti", "13", "1111")

        try:
            # Auth
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),

            main_page_1.suggest_wish_to_friend_1()
            main_page_1.suggest_wish_to_friend_1()

            main_page_1.logout(self.driver)
            main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)

            #main_page_1.accept_first_wish_privacy_all()
            main_page_1.accept_two_wish_privacy_all()

            # –ë–ª–æ–∫ —Å–Ω–∏–º–∫–æ–≤ —ç–∫—Ä–∞–Ω–∞
            action_taken = "_after_wish_add_phone1"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
            MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
            MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            main_page_1.logout(self.driver)
            main_page_1.auth_by_phone(TestData.phone_friend1, TestData.confirm_code)

            main_page_1.open_first_friend_first_wish()

            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏—Ç—å'"):
                time.sleep(3)
                main_page_1.scroll_until_visible(self.driver, MainPage.CONTRIBUTE_FOR_WISH_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.CONTRIBUTE_FOR_WISH_BUTTON)

            with allure.step("–ò—Å–ø–æ–ª–Ω–∏—Ç—å —á–µ–∫–±–æ–∫—Å"):
                time.sleep(3)
                main_page_1.click_by_uiautomator(TestData.PAYMENT_CHOOSE_FULL_PAYMENT_OPTION)

            with allure.step("–ò—Å–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∞"):
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.PAYMENT_EXECUTE_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.PAYMENT_EXECUTE_BUTTON)

            # –î–æ—Å—Ç–∞–≤–∫–∞
            with allure.step("–í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è"):
                time.sleep(3)
                main_page_1.click_by_uiautomator(TestData.DELIVERY_CHOOSE_RECIPIENT)
                time.sleep(3)
                main_page_1.click_by_uiautomator(TestData.RECIPIENT_CHOOSE_USER)
                time.sleep(3)
                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(3)

            with allure.step("–í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"):
                time.sleep(3)
                main_page_1.click_by_uiautomator(TestData.DELIVERY_CHOOSE_PICKUP_POINT)
                time.sleep(5)
                main_page_1.turn_on_gps()
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.DELIVERY_PICKUP_POINT_SEARCH_FIELD)
                time.sleep(3)
                main_page_1.copy_paste_simple("–ú–æ—Å–∫–≤–∞ 2-–π —Ö–≤–æ—Å—Ç–æ–≤ –ø–µ—Ä–µ—É–ª–æ–∫ 12")
                time.sleep(4)
                main_page_1.click_by_uiautomator(TestData.DELIVERY_PICKUP_POINT_SEARCH_RESULT_1)
                time.sleep(6)
                main_page_1.click(MainPage.DELIVERY_FOUND_SELECTED_PICKUP_POINT_CHOOSE_BUTTON)

            with allure.step("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"):
                time.sleep(4)
                main_page_1.scroll_until_visible(self.driver, MainPage.PAY_GO_TO_PAYMENT_BUTTON)
                main_page_1.click(MainPage.PAY_GO_TO_PAYMENT_BUTTON)

            # –®–∞–≥–∏ —Å –∫–∞—Ä—Ç–æ–π
            with allure.step("–æ–ø–ª–∞—Ça card"):
                main_page_1.pay_by_card()

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)


    @pytest.mark.regress
    @pytest.mark.payment_tests
    def test_suggest_wish_then_partial_and_full_payment_with_receive(self):
        """BUG: /-/issues/3237"""
        #status = "üî¥"
        status = "üü°"
        bug_link = "/-/issues/3237"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–û–ø–ª–∞—Ç–∞: –ñ–µ–ª–∞–Ω–∏–µ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å –¥–≤—É—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –≤ –ü–í"
        test_ss_name = "test_suggest_wish_then_partial_and_full_payment_with_receive"
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend3)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty_NEW", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy_NEW", "12", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend3, "Treti_NEW", "13", "1111")

        try:
            # Auth 1
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
            main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
            main_page_1.suggest_wish_to_friend_1()
            main_page_1.suggest_wish_to_friend_1()
            main_page_1.logout(self.driver)

            # Auth 3
            main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)
            main_page_1.accept_two_wish_privacy_all()
            main_page_1.logout(self.driver)

            # Auth 2
            main_page_1.auth_by_phone(TestData.phone_friend2, TestData.confirm_code)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∂–µ–ª–∞–Ω–∏–µ –¥—Ä—É–≥–∞
            main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
            time.sleep(2)
            main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_2)
            time.sleep(2)
            main_page_1.swipe_up(800)
            time.sleep(2)
            main_page_1.click(TestData.FRIEND_WISH_1)
            time.sleep(2)

            # –î–æ–Ω–∞—Ç –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫
            time.sleep(2)
            main_page_1.scroll_until_visible(self.driver, MainPage.CONTRIBUTE_FOR_WISH_BUTTON)
            time.sleep(2)
            main_page_1.click(MainPage.CONTRIBUTE_FOR_WISH_BUTTON)
            time.sleep(2)
            main_page_1.click_by_uiautomator(TestData.PAYMENT_DONATE_MONEY_AMOUNT_FIELD)
            time.sleep(2)
            main_page_1.send_keys_simple("100")
            time.sleep(1)
            self.driver.hide_keyboard()
            time.sleep(1)
            main_page_1.scroll_until_visible(self.driver, MainPage.PAY_GO_TO_PAYMENT_BUTTON)
            time.sleep(2)
            main_page_1.click(MainPage.PAY_GO_TO_PAYMENT_BUTTON)

            main_page_1.pay_by_card()
            main_page_1.logout(self.driver)

            # Auth 1
            main_page_1.auth_by_phone(TestData.phone_friend1, TestData.confirm_code)
            main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∂–µ–ª–∞–Ω–∏–µ –¥—Ä—É–≥–∞
            main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
            time.sleep(2)
            main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
            time.sleep(2)
            main_page_1.swipe_up(800)
            time.sleep(2)
            main_page_1.click(TestData.FRIEND_WISH_1)
            time.sleep(2)
            # –î–æ–Ω–∞—Ç –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫
            time.sleep(2)
            main_page_1.scroll_until_visible(self.driver, MainPage.CONTRIBUTE_FOR_WISH_BUTTON)
            time.sleep(2)
            main_page_1.click(MainPage.CONTRIBUTE_FOR_WISH_BUTTON)
            time.sleep(2)
            main_page_1.click_by_uiautomator(TestData.PAYMENT_DONATE_SET_FULL_AMOUNT_BTN)
            time.sleep(2)
            main_page_1.scroll_until_visible(self.driver, MainPage.PAY_GO_TO_PAYMENT_BUTTON)
            time.sleep(2)
            main_page_1.click(MainPage.PAY_GO_TO_PAYMENT_BUTTON)

            main_page_1.pay_by_card()
            main_page_1.logout(self.driver)

            # Auth 3
            main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)
            main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),

            main_page_1.click(TestData.BOTTOM_WISHES_BTN)
            main_page_1.is_element_visible(TestData.WISHES_100_FULL)
            main_page_1.click(TestData.WISHES_100_FULL)

            main_page_1.scroll_until_visible(self.driver, TestData.receive_wish)
            main_page_1.is_element_visible(TestData.receive_wish)
            main_page_1.click(TestData.receive_wish)


            # –î–æ—Å—Ç–∞–≤–∫–∞
            with allure.step("–í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è"):
                time.sleep(3)
                main_page_1.is_element_visible(TestData.DELIVERY_CHOOSE_RECIPIENT)
                main_page_1.click_by_uiautomator(TestData.DELIVERY_CHOOSE_RECIPIENT)
                time.sleep(3)
                main_page_1.click_by_uiautomator(TestData.RECIPIENT_CHOOSE_USER)
                time.sleep(3)
                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(3)

            with allure.step("–í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"):
                time.sleep(3)
                main_page_1.click_by_uiautomator(TestData.DELIVERY_CHOOSE_PICKUP_POINT)
                time.sleep(5)
                main_page_1.turn_on_gps()
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.DELIVERY_PICKUP_POINT_SEARCH_FIELD)
                time.sleep(3)
                main_page_1.copy_paste_simple("–ú–æ—Å–∫–≤–∞ 2-–π —Ö–≤–æ—Å—Ç–æ–≤ –ø–µ—Ä–µ—É–ª–æ–∫ 12")
                time.sleep(4)
                main_page_1.click_by_uiautomator(TestData.DELIVERY_PICKUP_POINT_SEARCH_RESULT_1)
                time.sleep(6)
                main_page_1.click(MainPage.DELIVERY_FOUND_SELECTED_PICKUP_POINT_CHOOSE_BUTTON)

            with allure.step("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"):
                time.sleep(4)
                main_page_1.scroll_until_visible(self.driver, MainPage.PAY_GO_TO_PAYMENT_BUTTON)
                main_page_1.click(MainPage.PAY_GO_TO_PAYMENT_BUTTON)
                main_page_1.pay_by_card()

                main_page_1.is_element_visible(TestData.BOTTOM_WISHES_BTN)
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                main_page_1.is_element_visible(TestData.WISH_IS_COMPLETING)
                main_page_1.click(TestData.WISH_IS_COMPLETING)

            status = "üü¢"
        except Exception as e:
            #status = "üî¥"
            status = "üü°"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration, bug_link)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)