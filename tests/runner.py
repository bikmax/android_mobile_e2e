import os
import sys
import signal
import threading
import requests
import pytest

# === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è session_id'–æ–≤ Sauce Labs ===
sauce_session_ids = []

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ ===
def terminate_all_sauce_sessions():
    SAUCE_USERNAME = os.environ.get("SAUCE_USERNAME")
    SAUCE_ACCESS_KEY = os.environ.get("SAUCE_ACCESS_KEY")

    if not SAUCE_USERNAME or not SAUCE_ACCESS_KEY:
        print("‚ö†Ô∏è No Sauce Labs credentials found. Skipping session termination.")
        return

    if not sauce_session_ids:
        print("‚ö†Ô∏è No Sauce Labs session IDs found to terminate.")
        return

    for session_id in sauce_session_ids:
        if not session_id.strip():
            continue
        url = f"https://api.us-west-1.saucelabs.com/rest/v1/{SAUCE_USERNAME}/jobs/{session_id}/stop"
        try:
            response = requests.put(url, auth=(SAUCE_USERNAME, SAUCE_ACCESS_KEY))
            print(f"üõë Terminating session {session_id} -> Status: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Failed to terminate session {session_id}: {e}")

def handle_termination(signum, frame):
    print(f"‚ö†Ô∏è Received termination signal ({signum}). Cleaning up Sauce Labs sessions...")
    terminate_all_sauce_sessions()
    sys.exit(0)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ===
def run_tests(platform=None, marker=None, filename=None):
    """
    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞:
    python tests/runner.py --platform android --marker "regress" --filename app-rc-v.1.9.4-b639cac5.apk
    """
    root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    sys.path.insert(0, root_dir)

    if platform:
        os.environ["TEST_PLATFORM"] = platform.lower()

    if filename:
        os.environ["TEST_APP_FILENAME"] = filename

    # –ï—Å–ª–∏ –µ—Å—Ç—å ENV-–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å session_id'–∞–º–∏, –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
    session_ids_raw = os.environ.get("SAUCE_SESSION_IDS", "")
    for sid in session_ids_raw.split(","):
        if sid.strip():
            sauce_session_ids.append(sid.strip())

    # –ó–∞–ø—É—Å–∫–∞–µ–º pytest
    pytest_args = ["tests/"]
    if marker:
        pytest_args.append(f"-m {marker}")

    # –ó–∞–ø—É—Å–∫ —Å –∫–æ–¥–æ–º –≤–æ–∑–≤—Ä–∞—Ç–∞
    exit_code = pytest.main(pytest_args)
    sys.exit(exit_code)

# === –í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ ===
if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGTERM –∏ SIGINT
    signal.signal(signal.SIGTERM, handle_termination)
    signal.signal(signal.SIGINT, handle_termination)

    platform = None
    marker = None
    filename = None

    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if "--platform" in sys.argv:
        idx = sys.argv.index("--platform") + 1
        if idx < len(sys.argv):
            platform = sys.argv[idx]

    if "--marker" in sys.argv:
        idx = sys.argv.index("--marker") + 1
        if idx < len(sys.argv):
            marker = sys.argv[idx]

    if "--filename" in sys.argv:
        idx = sys.argv.index("--filename") + 1
        if idx < len(sys.argv):
            filename = sys.argv[idx]

    run_tests(platform, marker, filename)
