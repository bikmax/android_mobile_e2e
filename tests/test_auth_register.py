import logging
import re
import time
import traceback

import allure
import pytest

from ResultCollector import ResultCollector
from core.pages.main_page import MainPage
from core.data.test_data import TestData
from reporting.TelegramReport import TelegramReport
from core.pages.base_test import BaseTest
from core.api.AuthController import AuthController


class AuthRegister(BaseTest):

    @pytest.mark.regress
    @pytest.mark.auth_register_tests
    def test_demo_user_path(self):
        status = "üü°"
        bug_link = "/-/issues/3213"
        test_name_this = "–°—Ü–µ–Ω–∞—Ä–∏–π –¥–µ–º–æ –ø—É—Ç–∏"
        main_page_1 = MainPage(self.driver)
        start_time = time.time()
        collector = ResultCollector()
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        try:
            main_page_1.skip_onboarding()

            main_page_1.is_element_visible(TestData.SKIP_BUTTON)
            main_page_1.click(TestData.SKIP_BUTTON)

            main_page_1.is_element_visible(TestData.CATALOG_CATEGORIES_BTN)
            main_page_1.click(TestData.CATALOG_CATEGORIES_BTN)
            time.sleep(5)
            main_page_1.is_element_visible(TestData.CATEGORY_LIST_ITEM_1)
            main_page_1.click(TestData.CATEGORY_LIST_ITEM_1)
            time.sleep(5)
            main_page_1.is_element_visible_by_resource_id(TestData.CATEGORY_ITEM_1)
            main_page_1.click_by_uiautomator(TestData.CATEGORY_ITEM_1)
            time.sleep(5)
            main_page_1.is_element_visible(TestData.BS_AUTH_TO_PROCEED)
            self.driver.back()
            time.sleep(5)
            main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_WISH_TO_FRIEND)
            main_page_1.click(MainPage.SUGGEST_WISH_TO_FRIEND)
            main_page_1.is_element_visible(TestData.BS_AUTH_TO_PROCEED)
            self.driver.back()

            main_page_1.is_element_visible(TestData.BOTTOM_HOME_BTN_XP)
            main_page_1.click(TestData.BOTTOM_HOME_BTN_XP)
            main_page_1.is_element_visible(TestData.BS_AUTH_TO_PROCEED)
            self.driver.back()

            main_page_1.is_element_visible(TestData.BOTTOM_FRIENDS_BTN_XP)
            main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
            main_page_1.is_element_visible(TestData.BS_AUTH_TO_PROCEED)
            self.driver.back()

            main_page_1.is_element_visible(TestData.BOTTOM_WISHES_BTN)
            main_page_1.click(TestData.BOTTOM_WISHES_BTN)
            main_page_1.is_element_visible(TestData.BS_AUTH_TO_PROCEED)
            main_page_1.click(TestData.BS_AUTH_TO_PROCEED)


            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞
            auth_controller = AuthController()
            auth_controller.authenticate_and_delete_user(TestData.phone_friend1)

            main_page_1.auth_by_phone(TestData.phone_friend1, TestData.confirm_code)
            main_page_1.register_new_user_all_fields(self.driver, "Firsty", "Petrov", "e2e_test_proj@proton.me")
            main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR)
            main_page_1.click_by_uiautomator(MainPage.PROFILE_SETTINGS_LOCATOR)
            time.sleep(5)
            main_page_1.is_element_visible(TestData.USER_PROFILE_PHONENUMBER)

            status = "üü¢"
        except Exception as e:
            status = "üü°"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration, bug_link)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)
    
    
    @pytest.mark.regress
    @pytest.mark.auth_register_tests
    def test_register_and_auth_new_user_all_fields(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è + –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_ss_name = "test_register_and_auth_new_user_all_fields"
        test_name_this = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏"
        main_page_1 = MainPage(self.driver)
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        status = "üî¥"  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        try:
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
            main_page_1.register_new_user_all_fields(self.driver, "Firsty", "Petrov", "e2e_test_proj@proton.me")

            main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR)
            main_page_1.click_by_uiautomator(MainPage.PROFILE_SETTINGS_LOCATOR)
            time.sleep(5)
            main_page_1.is_element_visible(TestData.USER_PROFILE_PHONENUMBER)

            status = "üü¢"
        except Exception as e:
            status = ""
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.regress
    @pytest.mark.auth_register_tests
    def test_register_negative_5_let(self):
        """–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, 5 –ª–µ—Ç
        BUG: /-/issues/3330"""

        #status = "üî¥"
        status = "üü°"
        bug_link = "/-/issues/3330"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_ss_name = "test_register_and_auth_5_let"
        test_name_this = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è & –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, 5 –ª–µ—Ç"
        main_page_1 = MainPage(self.driver)
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        # auth_controller.authenticate_and_register_user(TestData.phone_friend1, TestData.friend1_name, "11", "1111")

        try:
            # Auth
            time.sleep(5)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"):
                main_page_1.skip_onboarding()
                main_page_1.is_element_visible(TestData.AUTH_PHONE_FIELD)
                main_page_1.click(TestData.AUTH_PHONE_FIELD)
            time.sleep(2)

            with allure.step("–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"):
                main_page_1.send_keys_simple(TestData.phone_friend1)
                time.sleep(1)
                self.driver.hide_keyboard()
            time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                main_page_1.click(MainPage.CONTINUE_BUTTON_LOCATOR)
            time.sleep(2)

            with allure.step("–í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"):
                main_page_1.send_keys_simple("1111")
                time.sleep(1)
                self.driver.hide_keyboard()
            time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                main_page_1.click(MainPage.CONTINUE_BUTTON_LOCATOR)
            # TelegramReport.send_tg(f"click({MainPage.CONTINUE_BUTTON_LOCATOR})")
            time.sleep(2)

            with allure.step("–í—ã–±–æ—Ä —Å–æ–≥–ª–∞—Å–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏"):
                main_page_1.click(TestData.AUTH_CBX_TERMS)
            # TelegramReport.send_tg(f"click(TestData.AUTH_CBX_TERMS)")
            time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                main_page_1.click(MainPage.CONTINUE_BUTTON_LOCATOR)
            time.sleep(2)

            with allure.step("–í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                main_page_1.click(TestData.register_name)
            # TelegramReport.send_tg(f"click(TestData.register_name)")
            time.sleep(2)
            main_page_1.send_keys_simple("mnene5let")
            time.sleep(1)
            self.driver.hide_keyboard()

            with allure.step("–í—ã–±–æ—Ä –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"):
                main_page_1.click_by_uiautomator(TestData.register_bday)
            time.sleep(2)
            # TelegramReport.send_tg(f"click_by_uiautomator(TestData.register_bday)")
            main_page_1.send_keys_simple("11112024")
            time.sleep(1)
            self.driver.hide_keyboard()

            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                main_page_1.scroll_until_visible(self.driver, MainPage.CONTINUE_BUTTON_LOCATOR)
            time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                main_page_1.click(MainPage.CONTINUE_BUTTON_LOCATOR)

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑—Ä–∞—Å—Ç–µ 5 –ª–µ—Ç"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_5_YEARS),
                    "NOTIFICATION_FIREND_ADDED_WISH –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_5_YEARS),
                    "NOTIFICATION_FIREND_ADDED_WISH –Ω–µ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è!"
                )
                # TelegramReport.send_tg("NOTIFICATION_FIREND_ADDED_WISH visible main_page_1")

            status = "üü¢"
        except Exception as e:
            #status = "üî¥"
            status = "üü°"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration, bug_link)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)

    @pytest.mark.regress
    @pytest.mark.auth_register_tests
    def test_register_negative_fields(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∫—Ä–æ–º–µ —Ñ–∞–º–∏–ª–∏–∏
            –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ—Ç —Ñ–∞–º–∏–ª–∏–∏
            –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∫—Ä–æ–º–µ –∏–º–µ–Ω–∏"""

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_ss_name = "test_register_negative_fields"
        test_name_this = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è & –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
        main_page_1 = MainPage(self.driver)
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        # auth_controller.authenticate_and_register_user(TestData.phone_friend1, TestData.friend1_name, "11", "1111")

        try:
            # Auth
            time.sleep(20)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"):
                main_page_1.skip_onboarding()
                main_page_1.is_element_visible(TestData.AUTH_PHONE_FIELD)
                main_page_1.click(TestData.AUTH_PHONE_FIELD)
            time.sleep(2)

            with allure.step("–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"):
                main_page_1.send_keys_simple(TestData.phone_friend1)
            self.driver.hide_keyboard()
            time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                main_page_1.scroll_until_visible(self.driver, MainPage.CONTINUE_BUTTON_LOCATOR)
                time.sleep(2)
                main_page_1.click(MainPage.CONTINUE_BUTTON_LOCATOR)
            time.sleep(2)

            with allure.step("–í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"):
                main_page_1.send_keys_simple("1111")
            time.sleep(2)
            self.driver.hide_keyboard()

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                main_page_1.scroll_until_visible(self.driver, MainPage.CONTINUE_BUTTON_LOCATOR)
                time.sleep(2)
                main_page_1.click(MainPage.CONTINUE_BUTTON_LOCATOR)
            # TelegramReport.send_tg(f"click({MainPage.CONTINUE_BUTTON_LOCATOR})")
            time.sleep(2)

            with allure.step("–í—ã–±–æ—Ä —Å–æ–≥–ª–∞—Å–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏"):
                main_page_1.click(TestData.AUTH_CBX_TERMS)
            # TelegramReport.send_tg(f"click(TestData.AUTH_CBX_TERMS)")
            time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                main_page_1.scroll_until_visible(self.driver, MainPage.CONTINUE_BUTTON_LOCATOR)
                time.sleep(2)
                main_page_1.click(MainPage.CONTINUE_BUTTON_LOCATOR)
            time.sleep(3)

            with allure.step("1 –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                main_page_1.scroll_until_visible(self.driver, MainPage.CONTINUE_BUTTON_LOCATOR)
                time.sleep(2)
                main_page_1.click(MainPage.CONTINUE_BUTTON_LOCATOR)
                main_page_1.is_element_visible(TestData.FIELD_CANNOT_BE_EMPTY_1)
                main_page_1.is_element_visible(TestData.FIELD_CANNOT_BE_EMPTY_2)
            time.sleep(2)

            with allure.step("–í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                main_page_1.click(TestData.register_name)
                # TelegramReport.send_tg(f"click(TestData.register_name)")
                time.sleep(2)
                main_page_1.send_keys_simple("Pervy")
                self.driver.hide_keyboard()
                time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                main_page_1.scroll_until_visible(self.driver, MainPage.CONTINUE_BUTTON_LOCATOR)
                time.sleep(2)
                main_page_1.click(MainPage.CONTINUE_BUTTON_LOCATOR)
            time.sleep(2)

            with allure.step("–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                main_page_1.click(TestData.register_name)
                main_page_1.clear_text_field_simple(self.driver)
                self.driver.hide_keyboard()
                time.sleep(2)

            with allure.step("–í—ã–±–æ—Ä –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"):
                main_page_1.click_by_uiautomator(TestData.register_bday)
            time.sleep(2)
            # TelegramReport.send_tg(f"click_by_uiautomator(TestData.register_bday)")
            main_page_1.send_keys_simple("11112024")
            self.driver.hide_keyboard()
            time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
                main_page_1.scroll_until_visible(self.driver, MainPage.CONTINUE_BUTTON_LOCATOR)
                time.sleep(2)
                main_page_1.click(MainPage.CONTINUE_BUTTON_LOCATOR)
            time.sleep(2)

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)
