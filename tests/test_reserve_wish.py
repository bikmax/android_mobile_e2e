import logging
import re
import time
import traceback

import allure
import pytest

from ResultCollector import ResultCollector
from core.pages.main_page import MainPage
from core.data.test_data import TestData
from reporting.TelegramReport import TelegramReport
from core.pages.base_test import BaseTest
from core.api.AuthController import AuthController


class ReserveWish(BaseTest):

    @pytest.mark.regress
    @pytest.mark.reserve_wish_tests
    def test_reserve_custom_friend_gift(self):
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∞"
        test_ss_name = "test_reserve_custom_friend_gift"

        # Authenticate and delete users before the test
        with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º"):
            auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
            auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
            auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
            auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # Auth user 1
            with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
                main_page_1.add_one_wish()
                time.sleep(2)
                main_page_1.is_element_visible(TestData.BOTTOM_HOME_BTN_XP)
                main_page_1.click(TestData.BOTTOM_HOME_BTN_XP)
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(2)
                main_page_1.is_element_visible(MainPage.ADD_WISH_BUTTON)
                main_page_1.click(MainPage.ADD_WISH_BUTTON)
                time.sleep(2)
                main_page_1.is_element_visible(TestData.custom_wish_add_button)
                main_page_1.click(TestData.custom_wish_add_button)
                time.sleep(2)
                main_page_1.is_element_visible(MainPage.ADD_CUSTOM_WISH_LINK)
                main_page_1.click(MainPage.ADD_CUSTOM_WISH_LINK)
                time.sleep(2)
                main_page_1.send_keys(MainPage.ADD_CUSTOM_WISH_LINK, TestData.parseWildberries)
                time.sleep(2)

            # Finalize custom gift addition
            with allure.step("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"):
                main_page_1.click(TestData.next_button)
                time.sleep(40)
                main_page_1.click(TestData.next_button)
                time.sleep(4)
                main_page_1.click(TestData.next_button)
                time.sleep(4)
                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(4)
                main_page_1.is_element_visible(TestData.BOTTOM_WISHES_BTN)
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –≤–∏–¥–Ω–æ
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.logout(self.driver)
                time.sleep(2)
                main_page_1.auth_by_phone(TestData.phone_friend2, TestData.confirm_code)
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(6)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(6)

            # RESERVE WISH
            with allure.step("–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.swipe_up(700)
                # main_page_1.scroll_until_visible(self, TestData.friend_wish_3_wish)
                main_page_1.click_by_uiautomator_desc_contains("–Ω–æ–∂–µ–π")
                time.sleep(5)
                main_page_1.scroll_until_visible(self.driver, MainPage.RESERVE_WISH_BUTTON)
                time.sleep(5)
                main_page_1.click(MainPage.RESERVE_WISH_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.RESERVE_WISH_FINAL_BUTTON)
                time.sleep(2)

            # ACCEPT WISH PHONE1
            with allure.step("–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.logout(self.driver)
                time.sleep(2)
                main_page_1.auth_by_phone(TestData.phone_friend1, TestData.confirm_code)
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(2)
                main_page_1.is_element_visible(TestData.MY_WISHES_FIRST_WISH)
                main_page_1.click(TestData.MY_WISHES_FIRST_WISH)
                time.sleep(2)
                main_page_1.is_element_visible(MainPage.ACCEPT_RESERVED_WISH)
                main_page_1.click(MainPage.ACCEPT_RESERVED_WISH)
                time.sleep(2)
                main_page_1.click(MainPage.ACCEPT_RESERVED_WISH)
                time.sleep(2)

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_YOUR_RESERVED_WISH_DONE_AND_ARCHIVED),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_YOUR_RESERVED_WISH_DONE_AND_ARCHIVED),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )

            # make wish available again
            with allure.step("–°–¥–µ–ª–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–Ω–æ–≤–∞"):
                main_page_1.is_element_visible(TestData.BOTTOM_WISHES_BTN)
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(2)
                main_page_1.is_element_visible(TestData.wishes_show_all_whishes)
                main_page_1.click(TestData.wishes_show_all_whishes)
                time.sleep(2)
                main_page_1.is_element_visible(TestData.wishes_all_wishes_first_wish)
                main_page_1.click(TestData.wishes_all_wishes_first_wish)
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.ADD_WISH_AGAIN_BUTTON)
                time.sleep(2)
                main_page_1.is_element_visible(MainPage.ADD_WISH_AGAIN_BUTTON)
                main_page_1.click(MainPage.ADD_WISH_AGAIN_BUTTON)
                time.sleep(2)
                main_page_1.is_element_visible(MainPage.ADD_WISH_AGAIN_FINAL_BUTTON)
                main_page_1.click(MainPage.ADD_WISH_AGAIN_FINAL_BUTTON)
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∂–µ–ª–∞–Ω–∏—è —Å–Ω–æ–≤–∞"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_RESERVED_WISH_AVAILABLE_AGAIN),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_RESERVED_WISH_AVAILABLE_AGAIN),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )
            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.reserve_wish_tests
    @pytest.mark.regress
    def test_decline_reserve_wish(self):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–æ–º"""
        main_page_1 = MainPage(self.driver)
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–æ–º"
        test_ss_name = "test_decline_reserve_wish"

        # Authenticate and delete users before the test
        with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º"):
            auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # Auth user 1
            with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            with allure.step("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"):
                main_page_1.add_one_wish()

                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_WISH_BUTTON)
                time.sleep(2)
                main_page_1.click(TestData.custom_wish_add_button)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_CUSTOM_WISH_LINK)
                time.sleep(2)
                main_page_1.send_keys(MainPage.ADD_CUSTOM_WISH_LINK, TestData.parseWildberries)
                time.sleep(2)

            # Finalize custom gift addition
            with allure.step("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"):
                main_page_1.click(TestData.next_button)
                time.sleep(40)
                main_page_1.click(TestData.next_button)
                time.sleep(4)
                main_page_1.click(TestData.next_button)
                time.sleep(2)
                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(3)
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –≤–∏–¥–Ω–æ
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.logout(self)
                main_page_1.auth_by_phone(TestData.phone_friend2, TestData.confirm_code)

                main_page_1.is_element_visible(TestData.BOTTOM_FRIENDS_BTN_XP)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.is_element_visible(TestData.CONTACTS_FRIEND_1)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(4)


            # RESERVE WISH
            with allure.step("–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è"):
                time.sleep(2)
                main_page_1.swipe_up(600)
                time.sleep(2)
                main_page_1.click(TestData.FRIEND_WISH_KNIFES)
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.RESERVE_WISH_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.RESERVE_WISH_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.RESERVE_WISH_FINAL_BUTTON)
                time.sleep(2)



            # DECLINE WISH PHONE1
            with allure.step("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.logout(self)
                main_page_1.auth_by_phone(TestData.phone_friend1, TestData.confirm_code)


                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                main_page_1.is_element_visible(TestData.FRIEND_WISH_KNIFES)
                main_page_1.click(TestData.FRIEND_WISH_KNIFES)

                main_page_1.scroll_until_visible(self.driver, MainPage.DECLINE_RESERVED_WISH)
                time.sleep(2)
                main_page_1.click(MainPage.DECLINE_RESERVED_WISH)
                time.sleep(2)
                main_page_1.click(MainPage.DECLINE_RESERVED_WISH_FINAL)
                time.sleep(2)

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∂–µ–ª–∞–Ω–∏—è —Å–Ω–æ–≤–∞"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_RESERVED_WISH_AVAILABLE_AGAIN),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_RESERVED_WISH_AVAILABLE_AGAIN),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)



    @pytest.mark.reserve_wish_tests
    @pytest.mark.regress
    def test_reserve_custom_friend_gift_and_check_under_phone3(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        test_ss_name = "test_reserve_custom_friend_gift_and_check_under_phone3"

        # Authenticate and delete users before the test
        with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º"):
            auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
            auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
            auth_controller.authenticate_and_delete_user(TestData.phone_friend3)
            auth_controller.authenticate_and_register_user(TestData.phone_friend1, TestData.friend1_name, "11", "1111")
            auth_controller.authenticate_and_register_user(TestData.phone_friend2, TestData.friend2_name, "12", "1111")
            auth_controller.authenticate_and_register_user(TestData.phone_friend3, TestData.friend3_name, "11", "1111")

        try:
            # Auth user 1
            with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)


            # Add custom gift
            with allure.step("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"):

                main_page_1.add_one_wish()

                main_page_1.is_element_visible(TestData.BOTTOM_WISHES_BTN)
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(2)
                main_page_1.is_element_visible(MainPage.ADD_WISH_BUTTON)
                main_page_1.click(MainPage.ADD_WISH_BUTTON)
                time.sleep(2)
                main_page_1.is_element_visible(TestData.custom_wish_add_button)
                main_page_1.click(TestData.custom_wish_add_button)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_CUSTOM_WISH_LINK)
                time.sleep(2)
                main_page_1.send_keys(MainPage.ADD_CUSTOM_WISH_LINK, TestData.parseWildberries)
                time.sleep(2)
                main_page_1.click(TestData.next_button)
                time.sleep(40)
                main_page_1.click(TestData.next_button)
                time.sleep(4)
                main_page_1.click(TestData.next_button)
                time.sleep(2)
                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –≤–∏–¥–Ω–æ
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                # Relogin
                main_page_1.logout(self.driver)
                main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)

                main_page_1.is_element_visible(TestData.BOTTOM_FRIENDS_BTN_XP)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                main_page_1.is_element_visible(TestData.CONTACTS_FRIEND_1)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(4)



            # RESERVE WISH
            with allure.step("–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è"):
                time.sleep(2)
                main_page_1.swipe_up(900)
                time.sleep(3)
                main_page_1.click_by_uiautomator_desc_contains("–Ω–æ–∂–µ–π")
                time.sleep(4)
                main_page_1.scroll_until_visible(self.driver, MainPage.RESERVE_WISH_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.RESERVE_WISH_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.RESERVE_WISH_FINAL_BUTTON)
                time.sleep(2)

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_YOU_RESERVED_FRIEND_WISH),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_YOU_RESERVED_FRIEND_WISH),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )

            # CHECK PHONE 3
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ —Ç—Ä–µ—Ç—å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.logout(self.driver)
                time.sleep(2)
                main_page_1.auth_by_phone(TestData.phone_friend2, TestData.confirm_code)
                time.sleep(2)
                main_page_1.is_element_visible(TestData.BOTTOM_FRIENDS_BTN_XP)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)


            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ —Ç—Ä–µ—Ç—å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.is_element_visible(TestData.CONTACTS_FRIEND_1)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(3)
                main_page_1.is_element_visible(TestData.FRIEND_WISH_KNIFES)


            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.reserve_wish_tests
    def test_accept_reserve_wish_then_add_it_to_self(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ —Å–µ–±–µ –∑–∞–±—Ä–æ–Ω–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ"""
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = ""
        test_ss_name = "test_accept_reserve_wish_then_add_it_to_self"

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # Auth user 1
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend2, TestData.confirm_code)
            main_page_1.register_new_user(self.driver, TestData.phone_friend2)

            self.assertTrue(main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                            "Profile settings button not visible!")
            self.assertTrue(main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                            "Profile settings button not visible!")

            # Navigate to add custom gift
            main_page_1.click(TestData.BOTTOM_WISHES_BTN)
            time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(MainPage.ADD_WISH_BUTTON)
                time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(TestData.custom_wish_add_button)
                time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(MainPage.ADD_CUSTOM_WISH_LINK)
                time.sleep(2)

            with allure.step("–í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.send_keys(MainPage.ADD_CUSTOM_WISH_LINK, TestData.parseWildberries)
                time.sleep(2)

            # Finalize custom gift addition
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ'"):
                main_page_1.click(TestData.next_button)

            time.sleep(40)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ' —Å–Ω–æ–≤–∞"):
                main_page_1.click(TestData.next_button)
                time.sleep(4)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ' –µ—â–µ —Ä–∞–∑"):
                main_page_1.click(TestData.next_button)
                time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'"):
                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(3)

            main_page_1.click(TestData.BOTTOM_WISHES_BTN)
            time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –≤–∏–¥–Ω–æ
            # Relogin
            main_page_1.logout(self.driver)
            main_page_1.auth_by_phone(TestData.phone_friend2, TestData.confirm_code)

            main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
            time.sleep(2)
            main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
            time.sleep(4)

            # Screenshot block
            action_taken = "_privacy_all_check_by_second_phone"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)

            time.sleep(2)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            # RESERVE WISH
            time.sleep(2)
            main_page_1.swipe_up(600)
            time.sleep(2)
            main_page_1.click(TestData.FRIEND_WISH_KNIFES)
            time.sleep(2)
            main_page_1.scroll_until_visible(self.driver, MainPage.RESERVE_WISH_BUTTON)
            time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ'"):
                main_page_1.click(MainPage.RESERVE_WISH_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.RESERVE_WISH_FINAL_BUTTON)
                time.sleep(2)

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_YOU_RESERVED_FRIEND_WISH),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_YOU_RESERVED_FRIEND_WISH),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )

            # ADD TO SELF
            time.sleep(2)
            main_page_1.click(MainPage.ADD_TO_SELF_OR_BUY_BUTTON)
            time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–µ–±—è'"):
                main_page_1.click(MainPage.ADD_WISH_WITHOUT_SETTINGS)
                time.sleep(2)

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è –≤ —Å–µ–±—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_ADDED),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_ADDED),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.reserve_wish_tests
    def test_open_custom_gift_link_goldenapple(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –∂–µ–ª–∞–Ω–∏–∏ –¥—Ä—É–≥–∞ –ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ"""
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = ""
        test_ss_name = "test_open_custom_gift_link_goldenapple"

        # Authenticate and delete users before the test
        with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º"):
            auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # Auth user 1
            with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            # with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è"):
            #     self.assertTrue(main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
            #                     "Profile settings button not visible!")

            # Navigate to add custom gift
            with allure.step("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"):
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(2)

                main_page_1.click(MainPage.ADD_WISH_BUTTON)
                time.sleep(2)

                main_page_1.click(TestData.custom_wish_add_button)
                time.sleep(2)

                main_page_1.click(MainPage.ADD_CUSTOM_WISH_LINK)
                time.sleep(2)

                main_page_1.send_keys(MainPage.ADD_CUSTOM_WISH_LINK, TestData.parseGoldapple)
                time.sleep(2)

            # Finalize custom gift addition
            with allure.step("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"):
                main_page_1.click(TestData.next_button)
                time.sleep(40)

                main_page_1.click(TestData.next_button)
                time.sleep(4)

                main_page_1.click(TestData.next_button)
                time.sleep(2)

                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –≤–∏–¥–Ω–æ
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(4)

            # Screenshot block
            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞"):
                action_taken = "_privacy_all_check_by_second_phone"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(2)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            # CUSTOM WISH OPEN LINK
            with allure.step("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –∂–µ–ª–∞–Ω–∏–µ"):
                main_page_1.click(TestData.FRIEND_WISH_KNIFES)
                time.sleep(4)
                main_page_1.click(MainPage.OPEN_CUSTOM_WISH_LINK)
                time.sleep(15)

            # Screenshot block
            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –∂–µ–ª–∞–Ω–∏–µ"):
                action_taken = "_OPEN_CUSTOM_WISH_LINK"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(2)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            with allure.step("–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–≤—å—é"):
                main_page_1.click(MainPage.CLOSE_WEBVIEW)
                time.sleep(4)

            # Screenshot block
            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–µ–±-–≤—å—é"):
                action_taken = "_CLOSE_WEBVIEW"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(2)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.reserve_wish_tests
    @allure.story("–¢–µ—Å—Ç: –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –∂–µ–ª–∞–Ω–∏–∏ –¥—Ä—É–≥–∞ OZON")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_open_custom_gift_link_ozon(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –∂–µ–ª–∞–Ω–∏–∏ –¥—Ä—É–≥–∞ OZON"""
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = ""
        test_ss_name = "test_open_custom_gift_link_ozon"

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # Auth user 1
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend2, TestData.confirm_code)
            main_page_1.register_new_user(self.driver, TestData.phone_friend2)

            self.assertTrue(main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                            "Profile settings button not visible!")
            self.assertTrue(main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                            "Profile settings button not visible!")

            # Navigate to add custom gift
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é '–ñ–µ–ª–∞–Ω–∏—è'"):
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ'"):
                main_page_1.click(MainPage.ADD_WISH_BUTTON)
                time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ'"):
                main_page_1.click(TestData.custom_wish_add_button)
                time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è'"):
                main_page_1.click(MainPage.ADD_CUSTOM_WISH_LINK)
                time.sleep(2)

            with allure.step("–í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è OZON"):
                main_page_1.send_keys(MainPage.ADD_CUSTOM_WISH_LINK, TestData.parseOzon)
                time.sleep(2)

            # Finalize custom gift addition
            with allure.step("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"):
                main_page_1.click(TestData.next_button)
                time.sleep(40)

                main_page_1.click(TestData.next_button)
                time.sleep(4)

                main_page_1.click(TestData.next_button)
                time.sleep(2)

                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ —É –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(4)

                # Screenshot block
                action_taken = "_privacy_all_check_by_second_phone"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                time.sleep(2)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

                with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞"):
                    allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)

            # CUSTOM WISH OPEN LINK
            with allure.step("–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(TestData.FRIEND_WISH_KNIFES)
                time.sleep(4)
                main_page_1.click(MainPage.OPEN_CUSTOM_WISH_LINK)
                time.sleep(15)

                # Screenshot block
                action_taken = "_OPEN_CUSTOM_WISH_LINK"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                time.sleep(2)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

                with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Å—ã–ª–∫–∏"):
                    allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)

            # –ó–∞–∫—Ä—ã—Ç–∏–µ WebView
            with allure.step("–ó–∞–∫—Ä—ã—Ç–∏–µ WebView"):
                main_page_1.click(MainPage.CLOSE_WEBVIEW)
                time.sleep(4)

                # Screenshot block
                action_taken = "_CLOSE_WEBVIEW"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                time.sleep(2)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

                with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–∫—Ä—ã—Ç–∏—è WebView"):
                    allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.reserve_wish_tests
    @allure.story("–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –∂–µ–ª–∞–Ω–∏–∏ –¥—Ä—É–≥–∞ MEGA")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_open_custom_gift_link_mega(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –∂–µ–ª–∞–Ω–∏–∏ –¥—Ä—É–≥–∞ MEGA"""
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = ""
        test_ss_name = "test_open_custom_gift_link_mega"

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # Auth user 1
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend2, TestData.confirm_code)
            main_page_1.register_new_user(self.driver, TestData.phone_friend2)

            self.assertTrue(main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                            "Profile settings button not visible!")
            self.assertTrue(main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                            "Profile settings button not visible!")

            # Navigate to add custom gift
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é –∂–µ–ª–∞–µ–º–æ–≥–æ"):
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(MainPage.ADD_WISH_BUTTON)
                time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(TestData.custom_wish_add_button)
                time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ"):
                main_page_1.click(MainPage.ADD_CUSTOM_WISH_LINK)
                time.sleep(2)

            with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ"):
                main_page_1.send_keys(MainPage.ADD_CUSTOM_WISH_LINK, TestData.parseMegamarket)
                time.sleep(2)

            # Finalize custom gift addition
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ'"):
                main_page_1.click(TestData.next_button)

            time.sleep(40)

            with allure.step("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∂–µ–ª–∞–Ω–∏–µ–º"):
                main_page_1.click(TestData.next_button)
                time.sleep(4)

                main_page_1.click(TestData.next_button)
                time.sleep(2)

                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –≤–∏–¥–Ω–æ
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ —É –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(4)

                # Screenshot block
                action_taken = "_privacy_all_check_by_second_phone"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                time.sleep(2)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            # CUSTOM WISH OPEN LINK
            with allure.step("–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π"):
                main_page_1.click(TestData.FRIEND_WISH_KNIFES)
                time.sleep(4)
                main_page_1.click(MainPage.OPEN_CUSTOM_WISH_LINK)
                time.sleep(15)

                # Screenshot block
                action_taken = "_OPEN_CUSTOM_WISH_LINK"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                time.sleep(2)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            with allure.step("–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"):
                main_page_1.click(MainPage.CLOSE_WEBVIEW)
                time.sleep(4)

                # Screenshot block
                action_taken = "_CLOSE_WEBVIEW"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                time.sleep(2)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.reserve_wish_tests
    @allure.story("–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –∂–µ–ª–∞–Ω–∏–∏ –¥—Ä—É–≥–∞ Lamoda")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_open_custom_gift_link_lamoda(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –∂–µ–ª–∞–Ω–∏–∏ –¥—Ä—É–≥–∞ Lamoda"""
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = ""
        test_ss_name = "test_open_custom_gift_link_lamoda"

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # Auth user 1
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend2, TestData.confirm_code)
            main_page_1.register_new_user(self.driver, TestData.phone_friend2)

            self.assertTrue(main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                            "Profile settings button not visible!")
            self.assertTrue(main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                            "Profile settings button not visible!")

            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
            with allure.step("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"):
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_WISH_BUTTON)
                time.sleep(2)

                main_page_1.click(TestData.custom_wish_add_button)
                time.sleep(2)

                main_page_1.click(MainPage.ADD_CUSTOM_WISH_LINK)
                time.sleep(2)

                main_page_1.send_keys(MainPage.ADD_CUSTOM_WISH_LINK, TestData.parseLamoda)
                time.sleep(2)

            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
            with allure.step("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞"):
                main_page_1.click(TestData.next_button)
                time.sleep(40)

                main_page_1.click(TestData.next_button)
                time.sleep(4)

                main_page_1.click(TestData.next_button)
                time.sleep(2)

                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(4)

                # Screenshot block
                action_taken = "_privacy_all_check_by_second_phone"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(2)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            # –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ
            with allure.step("–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ"):
                main_page_1.click(TestData.FRIEND_WISH_KNIFES)
                time.sleep(4)
                main_page_1.click(MainPage.OPEN_CUSTOM_WISH_LINK)
                time.sleep(15)

                # Screenshot block
                action_taken = "_OPEN_CUSTOM_WISH_LINK"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(2)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–µ–±–≤—å—é
            with allure.step("–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–µ–±–≤—å—é"):
                main_page_1.click(MainPage.CLOSE_WEBVIEW)
                time.sleep(4)

                # Screenshot block
                action_taken = "_CLOSE_WEBVIEW"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(2)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.reserve_wish_tests
    @allure.story("–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –∂–µ–ª–∞–Ω–∏–∏ –¥—Ä—É–≥–∞ WILD")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_open_custom_gift_link_wild(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –∂–µ–ª–∞–Ω–∏–∏ –¥—Ä—É–≥–∞ WILD"""
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = ""
        test_ss_name = "test_open_custom_gift_link_wild"

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # Auth user 1
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend2, TestData.confirm_code)
            main_page_1.register_new_user(self.driver, TestData.phone_friend2)

            self.assertTrue(main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                            "Profile settings button not visible!")
            self.assertTrue(main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                            "Profile settings button not visible!")

            # Navigate to add custom gift
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                time.sleep(2)
                allure.attach("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è", name="Step Description",
                              attachment_type=allure.attachment_type.TEXT)

            with allure.step("–í—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(MainPage.ADD_WISH_BUTTON)
                time.sleep(2)

            with allure.step("–í—ã–±–æ—Ä –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(TestData.custom_wish_add_button)
                time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(MainPage.ADD_CUSTOM_WISH_LINK)
                time.sleep(2)

            with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ"):
                main_page_1.send_keys(MainPage.ADD_CUSTOM_WISH_LINK, TestData.parseWildberries)
                time.sleep(2)

            # Finalize custom gift addition
            with allure.step("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(TestData.next_button)
                time.sleep(40)

                main_page_1.click(TestData.next_button)
                time.sleep(4)

                main_page_1.click(TestData.next_button)
                time.sleep(2)

                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –≤–∏–¥–Ω–æ
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(4)

                # Screenshot block
                action_taken = "_privacy_all_check_by_second_phone"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(2)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            # CUSTOM WISH OPEN LINK
            with allure.step("–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(TestData.FRIEND_WISH_KNIFES)
                time.sleep(4)
                main_page_1.click(MainPage.OPEN_CUSTOM_WISH_LINK)
                time.sleep(15)

                # Screenshot block
                action_taken = "_OPEN_CUSTOM_WISH_LINK"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(2)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            with allure.step("–ó–∞–∫—Ä—ã—Ç–∏–µ WebView"):
                main_page_1.click(MainPage.CLOSE_WEBVIEW)
                time.sleep(4)

                # Screenshot block
                action_taken = "_CLOSE_WEBVIEW"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(2)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)
