import logging
import time
import traceback
import re

import allure
import pytest

from ResultCollector import ResultCollector
from core.pages.main_page import MainPage
from core.data.test_data import TestData
from reporting.TelegramReport import TelegramReport
from core.pages.base_test import BaseTest
from core.api.AuthController import AuthController

"""
Run tests: python tests/runner.py suggest_wish_tests
"""


class SuggestWish(BaseTest):

    @pytest.mark.regress
    @pytest.mark.suggest_wish_tests
    def test_suggest_gift_to_friend_and_accept_privacy_all(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥–æ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é –í–°–ï–ú"""
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ñ–µ–ª–∞–Ω–∏—è: –¥—Ä—É–≥—É, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥–æ–º(—á–µ—Ä–µ–∑ –º–æ–∏ –∂–µ–ª–∞–Ω–∏—è) —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é –í–°–ï–ú"
        test_ss_name = "test_suggest_gift_to_friend_and_accept_privacy_all"
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend3)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend3, "Treti", "13", "1111")

        try:
            # Auth
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            main_page_1.suggest_wish_to_friend_1()

            main_page_1.logout(self.driver)

            main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)

            time.sleep(5)
            main_page_1.accept_first_wish_privacy_all()

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.regress
    @pytest.mark.suggest_wish_tests
    @allure.story("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é –¢–æ–ª—å–∫–æ –º–Ω–µ")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_suggest_gift_to_friend_and_accept_privacy_onlyme(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥–æ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é –¢–æ–ª—å–∫–æ –º–Ω–µ"""
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é –¢–æ–ª—å–∫–æ –º–Ω–µ"
        test_ss_name = "test_suggest_gift_to_friend_and_accept_privacy_onlyme"
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend3)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend3, "Treti", "13", "1111")

        try:
            # Auth
            time.sleep(20)
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
            time.sleep(2)


            # TelegramReport.send_tg("PROFILE_SETTINGS_LOCATOR visible")

            # Refresh contacts
            time.sleep(2)
            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 1"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(1999)
                time.sleep(2)

            time.sleep(2)
            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 2"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(1999)
                time.sleep(2)

            # Start phone 1
            time.sleep(2)
            with allure.step("–í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 1"):
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                # TelegramReport.send_tg("click(TestData.first_friend_bonds)")
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_WISH_TO_FRIEND)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_WISH_TO_FRIEND)
                # TelegramReport.send_tg("click(MainPage.SUGGEST_WISH_TO_FRIEND)")
                time.sleep(2)
                main_page_1.click(MainPage.CHOOSE_FROM_CATALOG_BUTTON)
                # TelegramReport.send_tg("click(MainPage.CHOOSE_FROM_CATALOG_BUTTON)")
                time.sleep(2)
                main_page_1.click(TestData.CATALOG_CATEGORIES_BTN)
                # TelegramReport.send_tg("CATALOG_CATEGORIES_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CATEGORY_LIST_ITEM_1)
                # TelegramReport.send_tg("CATALOG_LIGHT_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click(TestData.CATEGORY_ITEM_2)
                # TelegramReport.send_tg("catalog_first_good clicked on phone 1")
                time.sleep(5)
                main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
                # TelegramReport.send_tg("SUGGEST_GIFT_TO_FRIEND_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_BUTTON)
                # TelegramReport.send_tg("ADD_TO_WISHES_BUTTON clicked on phone 1")

            # Start phone 2 accept privacy only me
            with allure.step("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 2 —Å –ø—Ä–∏–Ω—è—Ç–∏–µ–º –ø–æ–¥–∞—Ä–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π '–¢–æ–ª—å–∫–æ –º–Ω–µ'"):
                main_page_1.logout(self.driver)
                main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)
                main_page_1.accept_first_wish_privacy_me()

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ –≤–∏–¥–Ω–æ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.logout(self)
                main_page_1.exit_app_and_reopen()
                main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(5)
                main_page_1.is_element_visible(TestData.friend_wish_first_wish)

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.regress
    @pytest.mark.suggest_wish_tests
    @allure.story("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–∞ —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é SOME")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_suggest_gift_to_friend_and_accept_privacy_some_1(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥–æ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é SOME, –≤–∏–¥–∏–º—ã–π —Ç–æ–º—É –∫—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª"""
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        main_page_1 = MainPage(self.driver)

        test_name_this = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –µ–≥–æ –¥—Ä—É–≥–æ–º —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∏–¥–∏–º—ã–π —Ç–æ–º—É –∫—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª"
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()
        test_ss_name = "test_suggest_gift_to_friend_and_accept_privacy_some_1"

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend3)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend3, "Treti", "13", "1111")

        try:
            # Auth
            time.sleep(20)
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
            time.sleep(2)


            # –ù–∞—á–∞–ª–æ —Ç–µ–ª–µ—Ñ–æ–Ω 1
            time.sleep(2)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞"):
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
            # TelegramReport.send_tg("click(TestData.first_friend_bonds)")
            time.sleep(2)
            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞"):
                main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_WISH_TO_FRIEND)
            time.sleep(2)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É"):
                main_page_1.click(MainPage.SUGGEST_WISH_TO_FRIEND)
            # TelegramReport.send_tg("click(MainPage.SUGGEST_WISH_TO_FRIEND)")
            time.sleep(2)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"):
                main_page_1.click(MainPage.CHOOSE_FROM_CATALOG_BUTTON)
            # TelegramReport.send_tg("click(MainPage.CHOOSE_FROM_CATALOG_BUTTON)")
            time.sleep(2)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"):
                main_page_1.click(TestData.CATALOG_CATEGORIES_BTN)
            # TelegramReport.send_tg("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 1")
            time.sleep(2)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"):
                main_page_1.click_by_uiautomator(TestData.CATEGORY_LIST_ITEM_1)
            # TelegramReport.send_tg("–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 1")
            time.sleep(2)
            with allure.step("–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞"):
                main_page_1.click(TestData.CATEGORY_ITEM_2)
            # TelegramReport.send_tg("–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 1")
            time.sleep(5)
            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É"):
                main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
            time.sleep(2)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É"):
                main_page_1.click(MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
            # TelegramReport.send_tg("click(MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON) –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 1")
            time.sleep(2)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞"):
                main_page_1.click_element_by_bounds(TestData.catalog_suggest_wish_first_friend)
            time.sleep(2)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –≤ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(MainPage.SUGGEST_WISH_BUTTON)
            # TelegramReport.send_tg("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ADD_TO_WISHES_BUTTON –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 1")

            with allure.step("exit app"):
                main_page_1.logout(self)
                main_page_1.exit_app_and_reopen()
                main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)

            # –ù–∞—á–∞–ª–æ —Ç–µ–ª–µ—Ñ–æ–Ω 2, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–∞
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 2"):
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
            # TelegramReport.send_tg("click(TestData.BOTTOM_WISHES_BTN) –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 2")
            time.sleep(3)
            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 2"):
                main_page_1.swipe_up(600)
            time.sleep(2)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 2"):
                main_page_1.click(MainPage.ACCEPT_WISH_BUTTON)
            # TelegramReport.send_tg("click(MainPage.ACCEPT_WISH_BUTTON) –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 2")
            time.sleep(2)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 2"):
                main_page_1.click(MainPage.ADD_WISH_WITH_SETTINGS)
            # TelegramReport.send_tg("click(MainPage.ADD_WISH_WITH_SETTINGS) –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 2")
            time.sleep(2)
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 2"):
                main_page_1.click(MainPage.DESCRIPTION_FILED)
            # TelegramReport.send_tg("click(MainPage.DESCRIPTION_FILED) –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 2")
            time.sleep(2)


            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ —á—Ç–æ –≤–∏–¥–Ω–æ –ø–æ–¥–∞—Ä–æ–∫"):
                main_page_1.logout(self)
                main_page_1.auth_by_phone(TestData.phone_friend1, TestData.confirm_code)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                main_page_1.is_element_visible(TestData.friend_wish_first_wish)

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.regress
    @pytest.mark.suggest_wish_tests
    @allure.story(
        "–¢–µ—Å—Ç: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –µ–≥–æ –¥—Ä—É–≥–æ–º —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ –Ω–µ –¥—Ä—É–≥–∞ –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–µ–≥–æ –∂–µ–ª–∞–Ω–∏–µ")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_suggest_gift_to_friend_and_accept_privacy_some_2(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –µ–≥–æ –¥—Ä—É–≥–æ–º —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —é–∑–µ—Ä–æ–≤ –Ω–æ –Ω–µ –¥—Ä—É–≥–∞ –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–µ–≥–æ –∂–µ–ª–∞–Ω–∏–µ"""
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        main_page_1 = MainPage(self.driver)

        test_name_this = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –µ–≥–æ –¥—Ä—É–≥–æ–º —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ –Ω–µ –¥—Ä—É–≥–∞ –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–µ–≥–æ –∂–µ–ª–∞–Ω–∏–µ"
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()
        test_ss_name = "test_suggest_custom_gift_to_friend_and_accept_privacy_some"

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # Auth
            time.sleep(20)
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
            time.sleep(2)

            # Startphone 1
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞"):
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                # TelegramReport.send_tg("click(TestData.first_friend_bonds)")

            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∏ –≤—ã–±–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"):
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_WISH_TO_FRIEND)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_WISH_TO_FRIEND)
                # TelegramReport.send_tg("click(MainPage.SUGGEST_WISH_TO_FRIEND)")
                time.sleep(2)
                main_page_1.click(MainPage.CHOOSE_FROM_CATALOG_BUTTON)
                # TelegramReport.send_tg("click(MainPage.CHOOSE_FROM_CATALOG_BUTTON)")

            with allure.step("–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ç–æ–≤–∞—Ä–∞"):
                time.sleep(2)
                main_page_1.click(TestData.CATALOG_CATEGORIES_BTN)
                # TelegramReport.send_tg("CATALOG_CATEGORIES_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CATEGORY_LIST_ITEM_1)
                # TelegramReport.send_tg("CATALOG_LIGHT_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click(TestData.CATEGORY_ITEM_2)
                # TelegramReport.send_tg("catalog_first_good clicked on phone 1")
                time.sleep(5)

            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞"):
                main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
                # TelegramReport.send_tg("SUGGEST_GIFT_TO_FRIEND_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click_element_by_bounds(TestData.catalog_suggest_wish_first_friend)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_WISH_BUTTON)
                # TelegramReport.send_tg("ADD_TO_WISHES_BUTTON clicked on phone 1")

            main_page_1.logout(self)
            main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)

            # Start phone 2, accept privacy only me
            with allure.step("–ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 2"):
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                # TelegramReport.send_tg("click(TestData.BOTTOM_WISHES_BTN) called")
                time.sleep(3)
                main_page_1.scroll_until_visible(self.driver, MainPage.ACCEPT_WISH_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.ACCEPT_WISH_BUTTON)
                # TelegramReport.send_tg("click(MainPage.ACCEPT_WISH_BUTTON) called")
                time.sleep(2)
                main_page_1.click(MainPage.ADD_WISH_WITH_SETTINGS)
                # TelegramReport.send_tg("click(MainPage.ADD_WISH_WITH_SETTINGS) called")
                time.sleep(2)
                main_page_1.click(MainPage.DESCRIPTION_FILED)
                # TelegramReport.send_tg("click(MainPage.DESCRIPTION_FILED)")

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ —á—Ç–æ –Ω–µ –≤–∏–¥–Ω–æ –ø–æ–¥–∞—Ä–∫–∞"):
                main_page_1.logout(self)
                main_page_1.auth_by_phone(TestData.phone_friend1, TestData.confirm_code)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(5)
                main_page_1.is_element_invisible(TestData.friend_wish_first_wish)

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.suggest_wish_tests
    def test_suggest_gift_to_friend_and_decline_gift(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É, –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥–æ–º"""
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = ""
        test_ss_name = "test_suggest_gift_to_friend_and_accept_privacy_all"
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # Auth
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend2, TestData.confirm_code)
            main_page_1.register_new_user(self.driver, TestData.phone_friend2)

            self.assertTrue(
                main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                "Profile settings button not visible!"
            )
            # TelegramReport.send_tg("PROFILE_SETTINGS_LOCATOR visible")

            # Start phone 1 suggest wish
            time.sleep(2)
            main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
            # TelegramReport.send_tg("click(MainPage.FRIENDS_BUTTON)")
            time.sleep(2)
            main_page_1.click_element_by_bounds(TestData.second_friend_bonds)
            # TelegramReport.send_tg("click(TestData.first_friend_bonds)")
            time.sleep(2)
            main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_WISH_TO_FRIEND)
            main_page_1.click(MainPage.SUGGEST_WISH_TO_FRIEND)
            # TelegramReport.send_tg("click(MainPage.SUGGEST_WISH_TO_FRIEND)")
            time.sleep(2)
            main_page_1.click(MainPage.CHOOSE_FROM_CATALOG_BUTTON)
            # TelegramReport.send_tg("click(MainPage.CHOOSE_FROM_CATALOG_BUTTON)")
            time.sleep(2)
            main_page_1.click(TestData.CATALOG_CATEGORIES_BTN)
            # TelegramReport.send_tg("CATALOG_CATEGORIES_BUTTON clicked on phone 1")
            time.sleep(2)
            main_page_1.click_by_uiautomator(TestData.CATEGORY_LIST_ITEM_1)
            # TelegramReport.send_tg("CATALOG_LIGHT_BUTTON clicked on phone 1")
            time.sleep(2)
            # main_page_1.click(MainPage.ALL_FROM_CATEGORY)
            # TelegramReport.send_tg("ALL_FROM_CATEGORY clicked on phone 1")
            time.sleep(2)
            main_page_1.click(MainPage.THIRD_GOOD)
            # TelegramReport.send_tg("THIRD_GOOD clicked on phone 1")
            time.sleep(2)
            main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
            main_page_1.click(MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
            # TelegramReport.send_tg("SUGGEST_GIFT_TO_FRIEND_BUTTON clicked on phone 1")
            time.sleep(2)
            main_page_1.click(MainPage.SUGGEST_WISH_BUTTON)
            # TelegramReport.send_tg("ADD_TO_WISHES_BUTTON clicked on phone 1")

            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ

            self.assertTrue(
                main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_SUGGESTED),
                "NOTIFICATION_WISH_SUGGESTED not visible!"
            )
            self.assertTrue(
                main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_SUGGESTED),
                "NOTIFICATION_WISH_SUGGESTED not visible!"
            )

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            main_page_1.click(TestData.notification_bell)
            time.sleep(3)
            main_page_1.click(MainPage.SEE_SUGGESTED_WISH_FROM_NOTIFICATIONS)
            time.sleep(3)

            main_page_1.scroll_until_visible(self.driver, MainPage.DECLINE_WISH_BUTTON)
            main_page_1.click(MainPage.DECLINE_WISH_BUTTON)
            time.sleep(1)
            main_page_1.click_element_by_bounds(TestData.decline_wish_final_button)
            # TelegramReport.send_tg("click(MainPage.ACCEPT_WISH_BUTTON) called")

            self.assertTrue(
                main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_DECLINED),
                "NOTIFICATION_WISH_SUGGESTED not visible!"
            )
            self.assertTrue(
                main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_DECLINED),
                "NOTIFICATION_WISH_SUGGESTED not visible!"
            )
            # TelegramReport.send_tg("NOTIFICATION_WISH_SUGGESTED visible main_page_1")

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.suggest_wish_tests
    @allure.story("–¢–µ—Å—Ç: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ partner –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥–æ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é –í–°–ï–ú")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_suggest_partner_gift_to_friend_and_accept_privacy_all(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ partner –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥–æ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é –í–°–ï–ú"""
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = ""
        test_ss_name = "test_suggest_partner_gift_to_friend_and_accept_privacy_all"
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
        with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º"):
            auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
                time.sleep(2)
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
                time.sleep(2)

                time.sleep(2)
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend2, TestData.confirm_code)
                time.sleep(2)
                main_page_1.register_new_user(self.driver, TestData.phone_friend2)
                time.sleep(2)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(1999)
                time.sleep(2)

            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 2"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(1999)
                time.sleep(2)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1
            with allure.step("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_CATALOG_BTN)
                # TelegramReport.send_tg("click(MainPage.CATALOG_BOTTOM_BUTTON_BOUNDS)")
                time.sleep(5)
                main_page_1.click(TestData.catalog_search_field)
                # TelegramReport.send_tg("CATALOG_CATEGORIES_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.send_keys_simple(TestData.partner_wish)
                time.sleep(2)
                main_page_1.click(TestData.catalog_search_field_result)
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.CATEGORY_ITEM_1)
                # TelegramReport.send_tg("goods_list_first_good clicked on phone 1")
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
                # TelegramReport.send_tg("SUGGEST_GIFT_TO_FRIEND_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click_element_by_bounds(TestData.catalog_suggest_wish_first_friend)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_WISH_BUTTON)
                # TelegramReport.send_tg("ADD_TO_WISHES_BUTTON clicked on phone 1")

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_SUGGESTED_TO_FRIEND),
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ –≤–∏–¥–Ω–æ!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_SUGGESTED_TO_FRIEND),
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ –∏—Å—á–µ–∑–ª–æ!"
                )
                # TelegramReport.send_tg("NOTIFICATION_WISH_SUGGESTED visible main_page_1")

            # –°–∫—Ä–∏–Ω—à–æ—Ç: –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1
            action_taken = "_after_wish_add_phone1"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", attachment_type=allure.attachment_type.PNG)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", attachment_type=allure.attachment_type.PNG)

            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å"

            # –ü—Ä–∏–Ω—è—Ç–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 2
            with allure.step("–ü—Ä–∏–Ω—è—Ç–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 2"):
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                # TelegramReport.send_tg("click(TestData.BOTTOM_WISHES_BTN) called")
                time.sleep(3)
                main_page_1.swipe_up(600)
                time.sleep(2)
                main_page_1.click(MainPage.ACCEPT_WISH_BUTTON)
                # TelegramReport.send_tg("click(MainPage.ACCEPT_WISH_BUTTON) called")

            with allure.step("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(MainPage.ADD_WISH_WITH_SETTINGS)
                # TelegramReport.send_tg("click(MainPage.ADD_WISH_WITH_SETTINGS) called")
                time.sleep(2)
                main_page_1.click_element_by_bounds(TestData.accept_suggested_wish_desc_field)
                # TelegramReport.send_tg("click(MainPage.DESCRIPTION_FILED) called")
                time.sleep(2)
                main_page_1.send_keys_simple("test gift desc")
                # TelegramReport.send_tg("send_keys(MainPage.DESCRIPTION_FILED, 'test gift desc') called")
                time.sleep(2)
                main_page_1.click_element_by_bounds(MainPage.FINAL_ACCEPT_BONDS)
                # TelegramReport.send_tg("click(MainPage.FINAL_ACCEPT_BONDS) called")
                time.sleep(2)

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_ADDED),
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è –Ω–µ –≤–∏–¥–Ω–æ!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_ADDED),
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è –Ω–µ –∏—Å—á–µ–∑–ª–æ!"
                )
                # TelegramReport.send_tg("NOTIFICATION_WISH_SUGGESTED visible main_page_1")

            # –°–∫—Ä–∏–Ω—à–æ—Ç: –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 2
            action_taken = "_after_wish_accept_phone2"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∂–µ–ª–∞–Ω–∏—è (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 2)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", attachment_type=allure.attachment_type.PNG)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 2)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", attachment_type=allure.attachment_type.PNG)

            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                # TelegramReport.send_tg("click(TestData.first_friend_bonds)")
                time.sleep(4)

            # –°–∫—Ä–∏–Ω—à–æ—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1
            action_taken = "_after_wish_accept_visible_phone1"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", attachment_type=allure.attachment_type.PNG)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (–≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", attachment_type=allure.attachment_type.PNG)

            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å"

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.suggest_wish_tests
    @allure.story("–¢–µ—Å—Ç: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ partner –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥–æ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é –¢–æ–ª—å–∫–æ –º–Ω–µ")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_suggest_partner_gift_to_friend_and_accept_privacy_onlyme(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ partner –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥–æ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é –¢–æ–ª—å–∫–æ –º–Ω–µ"""
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = ""
        test_ss_name = "test_suggest_partner_gift_to_friend_and_accept_privacy_onlyme"
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
        with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º"):
            auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
                time.sleep(2)
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
                time.sleep(2)

                time.sleep(2)
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend2, TestData.confirm_code)
                time.sleep(2)
                main_page_1.register_new_user(self.driver, TestData.phone_friend2)
                time.sleep(2)

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                    "–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –≤–∏–¥–Ω–∞!"
                )
                # TelegramReport.send_tg("PROFILE_SETTINGS_LOCATOR visible")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(1999)
                time.sleep(2)

            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 2"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(1999)
                time.sleep(2)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1
            with allure.step("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_CATALOG_BTN)
                # TelegramReport.send_tg("click(MainPage.CATALOG_BOTTOM_BUTTON_BOUNDS)")
                time.sleep(5)
                main_page_1.click(TestData.catalog_search_field)
                # TelegramReport.send_tg("CATALOG_CATEGORIES_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.send_keys_simple(TestData.partner_wish)
                time.sleep(2)
                main_page_1.click(TestData.catalog_search_field_result)
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.CATEGORY_ITEM_1)
                # TelegramReport.send_tg("goods_list_first_good clicked on phone 1")
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
                # TelegramReport.send_tg("SUGGEST_GIFT_TO_FRIEND_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click_element_by_bounds(TestData.catalog_suggest_wish_first_friend)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_WISH_BUTTON)
                # TelegramReport.send_tg("ADD_TO_WISHES_BUTTON clicked on phone 1")

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_SUGGESTED_TO_FRIEND),
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ –≤–∏–¥–Ω–æ!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_SUGGESTED_TO_FRIEND),
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ –∏—Å—á–µ–∑–ª–æ!"
                )
                # TelegramReport.send_tg("NOTIFICATION_WISH_SUGGESTED visible main_page_1")

            # –°–∫—Ä–∏–Ω—à–æ—Ç: –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1
            action_taken = "_after_wish_add_phone1"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", attachment_type=allure.attachment_type.PNG)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", attachment_type=allure.attachment_type.PNG)

            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å"

            # –ü—Ä–∏–Ω—è—Ç–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 2
            with allure.step("–ü—Ä–∏–Ω—è—Ç–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 2"):
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                # TelegramReport.send_tg("click(TestData.BOTTOM_WISHES_BTN) called")
                time.sleep(3)
                main_page_1.swipe_up(600)
                time.sleep(2)
                main_page_1.click(MainPage.ACCEPT_WISH_BUTTON)
                # TelegramReport.send_tg("click(MainPage.ACCEPT_WISH_BUTTON) called")

            with allure.step("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                time.sleep(2)
                main_page_1.click(MainPage.ADD_WISH_WITH_SETTINGS)
                # TelegramReport.send_tg("click(MainPage.ADD_WISH_WITH_SETTINGS) called")
                time.sleep(2)
                main_page_1.click_element_by_bounds(TestData.accept_suggested_wish_desc_field)
                # TelegramReport.send_tg("click(MainPage.DESCRIPTION_FILED) called")
                time.sleep(2)
                main_page_1.send_keys_simple("test gift desc")
                # TelegramReport.send_tg("send_keys(MainPage.DESCRIPTION_FILED, 'test gift desc') called")
                time.sleep(2)
                main_page_1.scroll_down(self.driver, 1)
                # TelegramReport.send_tg("scroll_down 1")
                time.sleep(2)
                main_page_1.click_element_by_bounds(TestData.suggested_partner_wish_privacy_only_me)
                # TelegramReport.send_tg("click(MainPage.PRIVACY_ONLY_ME_BOUNDS) called")
                time.sleep(2)
                main_page_1.click_element_by_bounds(MainPage.FINAL_ACCEPT_BONDS)
                # TelegramReport.send_tg("click(MainPage.FINAL_ACCEPT_BONDS) called")

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_ADDED),
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è –Ω–µ –≤–∏–¥–Ω–æ!"
                )
                # TelegramReport.send_tg("NOTIFICATION_WISH_SUGGESTED visible main_page_1")

            # –°–∫—Ä–∏–Ω—à–æ—Ç: –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 2
            action_taken = "_after_wish_accept_phone2"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∂–µ–ª–∞–Ω–∏—è (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 2)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", attachment_type=allure.attachment_type.PNG)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 2)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", attachment_type=allure.attachment_type.PNG)

            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                # TelegramReport.send_tg("click(TestData.first_friend_bonds)")
                time.sleep(4)

            # –°–∫—Ä–∏–Ω—à–æ—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1
            action_taken = "_after_wish_accept_visible_phone1"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", attachment_type=allure.attachment_type.PNG)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (–≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", attachment_type=allure.attachment_type.PNG)

            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å"

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.suggest_wish_tests
    @allure.story(
        "–¢–µ—Å—Ç: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ partner –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥–æ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é SOME, –≤–∏–¥–∏–º—ã–π —Ç–æ–º—É –∫—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_suggest_partner_gift_to_friend_and_accept_privacy_some_1(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ partner –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥—É, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥—Ä—É–≥–æ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å—é SOME, –≤–∏–¥–∏–º—ã–π —Ç–æ–º—É –∫—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª"""
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        main_page_1 = MainPage(self.driver)

        test_name_this = ""
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()
        test_ss_name = "test_suggest_partner_gift_to_friend_and_accept_privacy_some_1"

        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
        with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º"):
            auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
                time.sleep(2)
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
                time.sleep(2)

                time.sleep(2)
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend2, TestData.confirm_code)
                time.sleep(2)
                main_page_1.register_new_user(self.driver, TestData.phone_friend2)
                time.sleep(2)

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                    "–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –≤–∏–¥–Ω–∞!"
                )
                # TelegramReport.send_tg("PROFILE_SETTINGS_LOCATOR visible")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(1999)
                time.sleep(2)

            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 2"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(1999)
                time.sleep(2)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1
            with allure.step("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_CATALOG_BTN)
                # TelegramReport.send_tg("click(MainPage.CATALOG_BOTTOM_BUTTON_BOUNDS)")
                time.sleep(5)
                main_page_1.click(TestData.catalog_search_field)
                # TelegramReport.send_tg("CATALOG_CATEGORIES_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.send_keys_simple(TestData.partner_wish)
                time.sleep(2)
                main_page_1.click(TestData.catalog_search_field_result)
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.CATEGORY_ITEM_1)
                # TelegramReport.send_tg("goods_list_first_good clicked on phone 1")
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
                # TelegramReport.send_tg("SUGGEST_GIFT_TO_FRIEND_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click_element_by_bounds(TestData.catalog_suggest_wish_first_friend)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_WISH_BUTTON)
                # TelegramReport.send_tg("ADD_TO_WISHES_BUTTON clicked on phone 1")

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_SUGGESTED_TO_FRIEND),
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ –≤–∏–¥–Ω–æ!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_SUGGESTED_TO_FRIEND),
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ –∏—Å—á–µ–∑–ª–æ!"
                )
                # TelegramReport.send_tg("NOTIFICATION_WISH_SUGGESTED visible main_page_1")

            # –°–∫—Ä–∏–Ω—à–æ—Ç: –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1
            action_taken = "_after_wish_add_phone1"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", attachment_type=allure.attachment_type.PNG)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", attachment_type=allure.attachment_type.PNG)

            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å"

            # –ü—Ä–∏–Ω—è—Ç–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 2
            with allure.step("–ü—Ä–∏–Ω—è—Ç–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 2"):
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                # TelegramReport.send_tg("click(TestData.BOTTOM_WISHES_BTN) called")
                time.sleep(3)
                main_page_1.swipe_up(600)
                time.sleep(2)
                main_page_1.click(MainPage.ACCEPT_WISH_BUTTON)
                # TelegramReport.send_tg("click(MainPage.ACCEPT_WISH_BUTTON) called")

            with allure.step("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                time.sleep(2)
                main_page_1.click(MainPage.ADD_WISH_WITH_SETTINGS)
                # TelegramReport.send_tg("click(MainPage.ADD_WISH_WITH_SETTINGS) called")
                time.sleep(2)
                main_page_1.click_element_by_bounds(TestData.accept_suggested_wish_desc_field)
                # TelegramReport.send_tg("click(MainPage.DESCRIPTION_FILED) called")
                time.sleep(2)
                main_page_1.send_keys_simple("test gift desc")
                # TelegramReport.send_tg("send_keys(MainPage.DESCRIPTION_FILED, 'test gift desc') called")
                time.sleep(2)
                main_page_1.scroll_down(self.driver, 1)
                # TelegramReport.send_tg("scroll_down 1")
                time.sleep(2)
                main_page_1.click_element_by_bounds(TestData.suggested_partner_wish_privacy_some)
                # TelegramReport.send_tg("click(MainPage.PRIVACY_SOME_BOUNDS) called")
                time.sleep(2)
                main_page_1.click_by_uiautomator_desc_contains(TestData.choose_friends_first)
                time.sleep(2)
                main_page_1.click_element_by_bounds(MainPage.FINAL_ACCEPT_BONDS)
                # TelegramReport.send_tg("click(MainPage.FINAL_ACCEPT_BONDS) called")

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_ADDED),
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è –Ω–µ –≤–∏–¥–Ω–æ!"
                )
                # TelegramReport.send_tg("NOTIFICATION_WISH_SUGGESTED visible main_page_1")
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_ADDED),
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è –Ω–µ –∏—Å—á–µ–∑–ª–æ!"
                )

            # –°–∫—Ä–∏–Ω—à–æ—Ç: –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 2
            action_taken = "_after_wish_accept_phone2"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∂–µ–ª–∞–Ω–∏—è (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 2)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", attachment_type=allure.attachment_type.PNG)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 2)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", attachment_type=allure.attachment_type.PNG)

            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                # TelegramReport.send_tg("click(TestData.first_friend_bonds)")
                time.sleep(4)

            # –°–∫—Ä–∏–Ω—à–æ—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ 1
            action_taken = "_after_wish_accept_visible_phone1"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", attachment_type=allure.attachment_type.PNG)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (–≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", attachment_type=allure.attachment_type.PNG)

            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å"

            # –†–∞–∑–ª–æ–≥–∏–Ω –∏ –≤—Ö–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            with allure.step("–†–∞–∑–ª–æ–≥–∏–Ω –∏ –≤—Ö–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                time.sleep(2)
                main_page_1.logout(self.driver)
                time.sleep(2)
                main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)
                time.sleep(2)
                main_page_1.register_new_user(self.driver, TestData.phone_friend2)
                time.sleep(2)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ —Ç—Ä–µ—Ç—å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ —Ç—Ä–µ—Ç—å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(999)
                time.sleep(4)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(4)

            # –°–∫—Ä–∏–Ω—à–æ—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞ —Ç—Ä–µ—Ç—å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            action_taken = "_wish_not_visible_under_phone3"
            ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
            ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –≤–∏–¥–µ–Ω —Ç—Ä–µ—Ç—å–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", attachment_type=allure.attachment_type.PNG)

            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (–ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –≤–∏–¥–µ–Ω —Ç—Ä–µ—Ç—å–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)"):
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", attachment_type=allure.attachment_type.PNG)

            time.sleep(1)
            assert MainPage.compare_screenshots(ss_run, ss_etalon), "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å"

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.suggest_wish_tests
    @allure.story(
        "Test Case: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ partner –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –µ–≥–æ –¥—Ä—É–≥–æ–º —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —é–∑–µ—Ä–æ–≤ –Ω–æ –Ω–µ –¥—Ä—É–≥–∞ –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–µ–≥–æ –∂–µ–ª–∞–Ω–∏–µ")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_suggest_partner_gift_to_friend_and_accept_privacy_some_2(self):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ partner –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –µ–≥–æ –¥—Ä—É–≥–æ–º —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —é–∑–µ—Ä–æ–≤ –Ω–æ –Ω–µ –¥—Ä—É–≥–∞ –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–µ–≥–æ –∂–µ–ª–∞–Ω–∏–µ"""
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        main_page_1 = MainPage(self.driver)

        test_name_this = ""
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()
        test_ss_name = "test_suggest_partner_gift_to_friend_and_accept_privacy_some_2"

        # Authenticate and delete users before the test
        with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º"):
            auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # Auth
            with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
                time.sleep(2)
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
                time.sleep(2)

                time.sleep(2)
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend2, TestData.confirm_code)
                time.sleep(2)
                main_page_1.register_new_user(self.driver, TestData.phone_friend2)
                time.sleep(2)

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR),
                    "Profile settings button not visible!"
                )
                # TelegramReport.send_tg("PROFILE_SETTINGS_LOCATOR visible")

            # refresh contacts
            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(1999)
                time.sleep(2)

            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ –≤—Ç–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(1999)
                time.sleep(2)

            # Start phone 1
            # add wish
            with allure.step("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_CATALOG_BTN)
                # TelegramReport.send_tg("click(MainPage.CATALOG_BOTTOM_BUTTON_BOUNDS)")
                time.sleep(5)
                main_page_1.click(TestData.catalog_search_field)
                # TelegramReport.send_tg("CATALOG_CATEGORIES_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.send_keys_simple(TestData.partner_wish)
                time.sleep(2)
                main_page_1.click(TestData.catalog_search_field_result)
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.CATEGORY_ITEM_1)
                # TelegramReport.send_tg("goods_list_first_good clicked on phone 1")
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_GIFT_TO_FRIEND_BUTTON)
                # TelegramReport.send_tg("SUGGEST_GIFT_TO_FRIEND_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click_element_by_bounds(TestData.catalog_suggest_wish_first_friend)
                time.sleep(2)
                main_page_1.click(MainPage.SUGGEST_WISH_BUTTON)
                # TelegramReport.send_tg("ADD_TO_WISHES_BUTTON clicked on phone 1")

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_SUGGESTED_TO_FRIEND),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_SUGGESTED_TO_FRIEND),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )
                # TelegramReport.send_tg("NOTIFICATION_WISH_SUGGESTED visible main_page_1")

            # Screenshot block
            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"):
                action_taken = "_after_wish_add_phone1"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(1)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            # Start phone 2 accept privacy only me
            with allure.step("–ü—Ä–∏–Ω—è—Ç–∏–µ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ –≤—Ç–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"):
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
                # TelegramReport.send_tg("click(TestData.BOTTOM_WISHES_BTN) called")
                time.sleep(3)
                main_page_1.swipe_up(600)
                time.sleep(2)
                main_page_1.click(MainPage.ACCEPT_WISH_BUTTON)
                # TelegramReport.send_tg("click(MainPage.ACCEPT_WISH_BUTTON) called")
                time.sleep(2)

                main_page_1.click(MainPage.ADD_WISH_WITH_SETTINGS)
                # TelegramReport.send_tg("click(MainPage.ADD_WISH_WITH_SETTINGS) called")
                time.sleep(2)
                main_page_1.click_element_by_bounds(TestData.accept_suggested_wish_desc_field)
                # TelegramReport.send_tg("click(MainPage.DESCRIPTION_FILED) called")
                time.sleep(2)
                main_page_1.send_keys_simple("test gift desc")
                # TelegramReport.send_tg("send_keys(MainPage.DESCRIPTION_FILED, 'test gift desc') called")
                time.sleep(2)

                main_page_1.scroll_down(self.driver, 1)
                # TelegramReport.send_tg("scroll_down 1")
                time.sleep(2)
                main_page_1.click_element_by_bounds(TestData.suggested_partner_wish_privacy_some)
                # TelegramReport.send_tg("click(MainPage.PRIVACY_ONLY_ME_BOUNDS) called")
                time.sleep(2)
                # –≤—ã–±–∏—Ä–∞–µ–º second –¥—Ä—É–≥–∞
                main_page_1.click_element_by_bounds(TestData.choose_friends_second)
                time.sleep(2)
                main_page_1.click_element_by_bounds(MainPage.FINAL_ACCEPT_BONDS)
                # TelegramReport.send_tg("click(MainPage.FINAL_ACCEPT_BONDS) called")

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_ADDED),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )
                # TelegramReport.send_tg("NOTIFICATION_WISH_SUGGESTED visible main_page_1")
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_ADDED),
                    "NOTIFICATION_WISH_SUGGESTED visible!"
                )

            # Screenshot block
            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∂–µ–ª–∞–Ω–∏—è –Ω–∞ –≤—Ç–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"):
                action_taken = "_after_wish_accept_phone2"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(1)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥ –ø–µ—Ä–≤—ã–º
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∂–µ–ª–∞–Ω–∏—è –ø–æ–¥ –ø–µ—Ä–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                # TelegramReport.send_tg("click(TestData.first_friend_bonds)")
                time.sleep(4)

            # Screenshot block
            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"):
                action_taken = "_after_wish_accept_visible_phone1"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(1)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            # –†–∞–∑–ª–æ–≥–∏–Ω
            with allure.step("–†–∞–∑–ª–æ–≥–∏–Ω –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                time.sleep(2)
                main_page_1.logout(self.driver)
                time.sleep(2)

            # –õ–æ–≥–∏–Ω —Ç—Ä–µ—Ç—å–∏–º
            with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)
                time.sleep(2)
                main_page_1.register_new_user(self.driver, TestData.phone_friend2)
                time.sleep(2)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥ —Ç—Ä–µ—Ç—å–∏–º —é–∑–µ—Ä–æ–º
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∂–µ–ª–∞–Ω–∏—è –ø–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(999)
                time.sleep(4)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(4)

            # Screenshot block
            with allure.step("–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∂–µ–ª–∞–Ω–∏—è –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"):
                action_taken = "_wish_not_visible_under_phone3"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                allure.attach.file(ss_etalon, name="Etalon Screenshot", attachment_type=allure.attachment_type.PNG)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                allure.attach.file(ss_run, name="Run Screenshot", attachment_type=allure.attachment_type.PNG)
                time.sleep(1)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)
