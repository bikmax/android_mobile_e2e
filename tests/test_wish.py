import logging
import re
import time
import traceback

import allure
import pytest

from ResultCollector import ResultCollector
from core.pages.main_page import MainPage
from core.data.test_data import TestData
from reporting.TelegramReport import TelegramReport
from core.pages.base_test import BaseTest
from core.api.AuthController import AuthController


class Wish(BaseTest):

    @pytest.mark.regress
    @pytest.mark.wish_tests
    def test_ai_wish_open(self):
        """BUG: –∂–¥–µ–º ID /-/issues/2287"""
        test_name_this = "–û—Ç–∫—Ä—ã—Ç–∏–µ –∂–µ–ª–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é AI"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        #status = "üî¥"
        status = "üü°"
        bug_link = "/-/issues/2287"
        collector = ResultCollector()
        main_page = MainPage(self.driver)
        auth = AuthController()
        start_time = time.time()  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞

        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            auth.authenticate_and_delete_user(TestData.phone_friend1)
            auth.authenticate_and_register_user(TestData.phone_friend1, TestData.friend1_name, "11", "1111")
            main_page.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
            time.sleep(2)
            main_page.is_element_visible(TestData.BOTTOM_AI_BTN_XP)
            main_page.click(TestData.BOTTOM_AI_BTN_XP)
            time.sleep(2)
            main_page.is_element_visible(TestData.AI_SEARCH_FIELD)
            main_page.click(TestData.AI_SEARCH_FIELD)
            main_page.send_keys_simple("fisherman")

            main_page.is_element_visible(TestData.AI_SEND_MESSAGE)
            main_page.click(TestData.AI_SEND_MESSAGE)

            main_page.is_element_visible(TestData.AI_SEARCH_FIELD)
            main_page.click(TestData.AI_SEARCH_FIELD)
            main_page.send_keys_simple("3000")

            main_page.is_element_visible(TestData.AI_SEND_MESSAGE)
            main_page.click(TestData.AI_SEND_MESSAGE)
            time.sleep(5)

            main_page.is_element_visible(TestData.AI_RESULT_1)
            main_page.click(TestData.AI_RESULT_1)

            main_page.is_element_visible(MainPage.ADD_TO_WISHES_OR_BUY_BUTTON)
            main_page.click(MainPage.ADD_TO_WISHES_OR_BUY_BUTTON)

            main_page.is_element_visible(MainPage.ADD_WISH_WITHOUT_SETTINGS)
            main_page.click(MainPage.ADD_WISH_WITHOUT_SETTINGS)

            main_page.is_element_visible(TestData.BOTTOM_WISHES_BTN)
            main_page.click(TestData.BOTTOM_WISHES_BTN)

            main_page.is_element_visible(TestData.MY_WISHES_FIRST_WISH)


            status = "üü¢"
        except Exception as e:
            #status = "üî¥"
            status = "üü°"
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)
            raise e
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)

    @pytest.mark.regress
    @pytest.mark.wish_tests
    def test_deflete_wish3(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è"""
        test_name_this = "–£–¥–∞–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        status = "üî¥"
        collector = ResultCollector()
        main_page = MainPage(self.driver)
        auth = AuthController()
        start_time = time.time()  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞

        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            auth.authenticate_and_delete_user(TestData.phone_friend1)
            auth.authenticate_and_register_user(TestData.phone_friend1, TestData.friend1_name, "11", "1111")
            main_page.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
            time.sleep(2)
            main_page.add_two_wishes()
            main_page.click(TestData.BOTTOM_WISHES_BTN)
            time.sleep(5)
            main_page.click(TestData.MY_WISHES_FIRST_WISH)
            time.sleep(5)
            main_page.click(TestData.MY_WISHES_OPENED_WISH_EDIT_BUTTON)
            time.sleep(2)
            main_page.click(TestData.MY_WISHES_EDIT_DELETE_BUTTON)
            time.sleep(2)
            main_page.click(MainPage.DELETE_WISH)
            time.sleep(5)
            assert main_page.is_element_invisible(TestData.MY_WISHES_SECOND_WISH), \
                "NOTIFICATION_AVATAR_UPDATED is visible when it should not be!"

            report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ—Ç —Å—Å—ã–ª–∫–∏")

            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.wish_tests
    @pytest.mark.regress
    def test_add_wish_from_catalog_visible_all(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –í—Å–µ–º"""

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–ñ–µ–ª–∞–Ω–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –í—Å–µ–º"
        main_page_1 = MainPage(self.driver)
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()
        test_ss_name = "test_add_wish_from_catalog_visible_all"

        with allure.step("Authenticate and delete users before the test"):
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
            auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
            auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
            auth_controller.authenticate_and_delete_user(TestData.phone_friend3)

            auth_controller.authenticate_and_register_user(TestData.phone_friend1, TestData.friend1_name, "11", "1111")
            auth_controller.authenticate_and_register_user(TestData.phone_friend2, TestData.friend2_name, "12", "1111")
            auth_controller.authenticate_and_register_user(TestData.phone_friend3, TestData.friend3_name, "12", "1111")

        try:
            with allure.step("Authorize users and register new accounts"):
                # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                # time.sleep(20)
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

            with allure.step("Navigate through catalog and add a wish"):
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∂–µ–ª–∞–Ω–∏–µ
                main_page_1.add_two_wishes()

            with allure.step("Verify wish visibility under second user"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∂–µ–ª–∞–Ω–∏—è —É –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                time.sleep(1)
                main_page_1.logout(self.driver)
                main_page_1.exit_app_and_reopen()

                main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)
                time.sleep(5)
                main_page_1.is_element_visible(TestData.BOTTOM_FRIENDS_BTN_XP)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)

                main_page_1.is_element_visible(TestData.CONTACTS_FRIEND_1)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                main_page_1.is_element_visible(TestData.friend_wish_first_wish)
                time.sleep(5)


                status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.wish_tests
    @pytest.mark.regress
    @allure.feature("Wish")
    @allure.story("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é '–¢–æ–ª—å–∫–æ –º–Ω–µ'")
    def test_add_wish_from_catalog_visible_only_me(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –¢–æ–ª—å–∫–æ –º–Ω–µ"""

        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–ñ–µ–ª–∞–Ω–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é '–¢–æ–ª—å–∫–æ –º–Ω–µ'"
        test_ss_name = "test_add_wish_from_catalog_visible_only_me"
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        try:
            # Authenticate and delete users before the test
            with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
                # Authenticate and delete users before the test
                auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
                auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
                auth_controller.authenticate_and_delete_user(TestData.phone_friend3)
                auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
                auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")
                auth_controller.authenticate_and_register_user(TestData.phone_friend3, "Treti", "13", "1111")

            with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"):
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)


            # Add wish
            with allure.step("–ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –≤—ã–±–æ—Ä –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_CATALOG_BTN)
                # TelegramReport.send_tg("click(MainPage.CATALOG_BOTTOM_BUTTON_BOUNDS)")
                time.sleep(5)
                main_page_1.click(TestData.CATALOG_CATEGORIES_BTN)
                # TelegramReport.send_tg("CATALOG_CATEGORIES_BUTTON clicked on phone 1")
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.CATEGORY_LIST_ITEM_1)
                # TelegramReport.send_tg("CATALOG_LIGHT_BUTTON clicked on phone 1")
                time.sleep(5)
                main_page_1.click(TestData.CATEGORY_ITEM_2)
                # TelegramReport.send_tg("goods_list_first_good clicked on phone 1")
                time.sleep(5)

            with allure.step("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ '–¢–æ–ª—å–∫–æ –º–Ω–µ'"):
                main_page_1.scroll_until_visible(self.driver, MainPage.ADD_TO_WISHES_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_TO_WISHES_BUTTON)
                # TelegramReport.send_tg("ADD_TO_WISHES_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click(MainPage.ADD_WISH_WITH_SETTINGS)
                time.sleep(2)
                # TelegramReport.send_tg("ADD_WISH_WITH_SETTINGS clicked on phone 1")
                main_page_1.click_by_uiautomator_desc_contains(MainPage.PRIVACY_ONLY_ME_DESC)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_BUTTON)


            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∂–µ–ª–∞–Ω–∏—è –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                main_page_1.logout(self)
                time.sleep(2)
                main_page_1.auth_by_phone(TestData.phone_friend2, TestData.confirm_code)
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_2)
                time.sleep(5)
                assert main_page_1.is_element_invisible(TestData.friend_wish_first_wish)

            status = "üü¢"

        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.wish_tests
    @pytest.mark.regress
    @allure.feature("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è")
    @allure.story("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ù–µ–∫–æ—Ç–æ—Ä—ã–º")
    def test_add_wish_from_catalog_visible_some(self):
        status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–ñ–µ–ª–∞–Ω–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ù–µ–∫–æ—Ç–æ—Ä—ã–º"
        test_ss_name = "test_add_wish_from_catalog_visible_some"
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        with allure.step("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º"):
            auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
            auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
            auth_controller.authenticate_and_delete_user(TestData.phone_friend3)
            auth_controller.authenticate_and_register_user(TestData.phone_friend1, TestData.friend1_name, "11", "1111")
            auth_controller.authenticate_and_register_user(TestData.phone_friend2, TestData.friend2_name, "12", "1111")
            auth_controller.authenticate_and_register_user(TestData.phone_friend3, TestData.friend3_name, "11", "1111")

        try:
            with allure.step("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"):
                time.sleep(5)
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
                time.sleep(2)

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è"):
                assert main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR), \
                    "Profile settings button not visible!"
                # TelegramReport.send_tg("PROFILE_SETTINGS_LOCATOR visible")

            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(5)
                main_page_1.swipe_down(999)
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(999)
                time.sleep(2)

            with allure.step("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_CATALOG_BTN)
                # TelegramReport.send_tg("click(MainPage.CATALOG_BOTTOM_BUTTON_BOUNDS)")
                time.sleep(2)
                main_page_1.click(TestData.CATALOG_CATEGORIES_BTN)
                # TelegramReport.send_tg("CATALOG_CATEGORIES_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CATEGORY_LIST_ITEM_1)
                # TelegramReport.send_tg("CATALOG_LIGHT_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.click(TestData.CATEGORY_ITEM_2)
                # TelegramReport.send_tg("goods_list_first_good clicked on phone 1")
                time.sleep(5)
                main_page_1.scroll_until_visible(self.driver, MainPage.ADD_TO_WISHES_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_TO_WISHES_BUTTON)
                # TelegramReport.send_tg("ADD_TO_WISHES_BUTTON clicked on phone 1")
                time.sleep(2)

            with allure.step("–í—ã–±–æ—Ä –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ù–µ–∫–æ—Ç–æ—Ä—ã–º"):
                main_page_1.click(MainPage.ADD_WISH_WITH_SETTINGS)
                time.sleep(2)
                # TelegramReport.send_tg("ADD_WISH_WITH_SETTINGS clicked on phone 1")
                main_page_1.click_by_uiautomator_desc_contains(MainPage.PRIVACY_SOME_DESC)
                time.sleep(4)
                main_page_1.click_by_uiautomator_desc_contains(TestData.choose_friends_first)
                time.sleep(2)
                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_BUTTON)

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è"):
                self.assertTrue(
                    main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_ADDED),
                    "NOTIFICATION_WISH_SUGGESTED not visible!"
                )
                self.assertTrue(
                    main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_ADDED),
                    "NOTIFICATION_WISH_SUGGESTED visible!"
                )

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∂–µ–ª–∞–Ω–∏—è –ø–æ–¥ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                time.sleep(2)
                main_page_1.logout(self.driver)
                time.sleep(2)
                main_page_1.auth_by_phone(TestData.phone_friend2, TestData.confirm_code)
                time.sleep(5)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_2)
                time.sleep(5)



            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∂–µ–ª–∞–Ω–∏—è –ø–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                time.sleep(1)
                main_page_1.logout(self.driver)
                main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)
                main_page_1.is_element_visible(TestData.BOTTOM_FRIENDS_BTN_XP)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                main_page_1.is_element_visible(TestData.CONTACTS_FRIEND_2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_2)
                main_page_1.is_element_invisible(TestData.FRIEND_WISH_1)
                time.sleep(2)



            status = "üü¢"
        except Exception as e:
            status = "üî¥"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration)

    @pytest.mark.wish_tests
    @pytest.mark.regress
    def test_add_partner_wish_from_catalog_visible_all(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –í—Å–µ–º"""
        status = "üü°"
        bug_link = "/-/issues/3237"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–ñ–µ–ª–∞–Ω–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –í—Å–µ–º"
        test_ss_name = "test_add_partner_wish_from_catalog_visible_all"
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend3)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend3, "Treti", "13", "1111")

        try:
            # Auth
            with allure.step("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                time.sleep(2)
                main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)

                # TelegramReport.send_tg("User 1 authenticated and registered")

            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"):
                assert main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR), \
                    "Profile settings button not visible!"
                # TelegramReport.send_tg("PROFILE_SETTINGS_LOCATOR visible")

            # Add wish
            with allure.step("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_CATALOG_BTN)
                time.sleep(5)
                main_page_1.click(TestData.catalog_search_field)
                time.sleep(2)
                main_page_1.send_keys_simple(TestData.partner_wish)
                time.sleep(2)
                main_page_1.click(TestData.catalog_search_field_result)
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.CATEGORY_ITEM_1)
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.ADD_TO_WISHES_OR_BUY_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_TO_WISHES_OR_BUY_BUTTON)
                time.sleep(2)
                main_page_1.click(TestData.partner_wish_add_button)
                # self.assertTrue(
                #     main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_ADDED),
                #     "NOTIFICATION_WISH_SUGGESTED not visible!"
                # )
                # self.assertTrue(
                #     main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_ADDED),
                #     "NOTIFICATION_WISH_SUGGESTED not visible!"
                # )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥ –≤—Ç–æ—Ä—ã–º —é–∑–µ—Ä–æ–º
                main_page_1.logout(self.driver)
                main_page_1.auth_by_phone(TestData.phone_friend2, TestData.confirm_code)
                main_page_1.open_first_friend_first_wish()

            status = "üü¢"
        except Exception as e:
            status = "üü°"
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)
            raise e
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)

    @pytest.mark.wish_tests
    @pytest.mark.regress
    def test_add_partner_wish_from_catalog_visible_only_me(self):
        """BUG: –∂–¥–µ–º ID /-/issues/2287"""
        status = "üü°"
        bug_link = "/-/issues/2287"
        #status = "üî¥"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ PARTNER –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –¢–æ–ª—å–∫–æ –º–Ω–µ"
        test_ss_name = "test_add_partner_wish_from_catalog_visible_only_me"
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")

        try:
            # Auth
            time.sleep(20)
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
            time.sleep(2)

            main_page_1.register_new_user(self.driver, TestData.phone_friend2)

            assert main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR), \
                "Profile settings button not visible!"
            # TelegramReport.send_tg("PROFILE_SETTINGS_LOCATOR visible")

            # –®–∞–≥ 1: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_CATALOG_BTN)
                # TelegramReport.send_tg("click(MainPage.CATALOG_BOTTOM_BUTTON_BOUNDS)")
                time.sleep(5)

            # –®–∞–≥ 2: –ø–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
            with allure.step("–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"):
                main_page_1.click(TestData.catalog_search_field)
                # TelegramReport.send_tg("CATALOG_CATEGORIES_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.send_keys_simple(TestData.partner_wish)
                time.sleep(2)
                main_page_1.click(TestData.catalog_search_field_result)
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.CATEGORY_ITEM_1)
                # TelegramReport.send_tg("goods_list_first_good clicked on phone 1")
                time.sleep(2)

            # –®–∞–≥ 3: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∂–µ–ª–∞–Ω–∏—è
            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.scroll_until_visible(self.driver, MainPage.ADD_TO_WISHES_OR_BUY_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_TO_WISHES_OR_BUY_BUTTON)
                # TelegramReport.send_tg("ADD_TO_WISHES_BUTTON clicked on phone 1")
                time.sleep(2)

            # –®–∞–≥ 4: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ PARTNER —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            with allure.step("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ PARTNER –∂–µ–ª–∞–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"):
                main_page_1.click_element_by_bounds(TestData.partner_wish_add_with_settings_button)
                time.sleep(2)
                main_page_1.click(TestData.partner_wish_add_button)
                time.sleep(2)

            # –®–∞–≥ 5: –≤—ã–±–æ—Ä –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ "–¢–æ–ª—å–∫–æ –º–Ω–µ"
            with allure.step("–í—ã–±–æ—Ä –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –¢–æ–ª—å–∫–æ –º–Ω–µ"):
                main_page_1.click_by_uiautomator_desc_contains(MainPage.PRIVACY_ONLY_ME_DESC)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_BUTTON)

            # –®–∞–≥ 6: –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è
            #with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è"):
                # self.assertTrue(
                #     main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_ADDED),
                #     "NOTIFICATION_WISH_SUGGESTED not visible!"
                # )
                # self.assertTrue(
                #     main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_ADDED),
                #     "NOTIFICATION_WISH_SUGGESTED not visible!"
                # )

            # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∂–µ–ª–∞–Ω–∏—è –ø–æ–¥ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥ –≤—Ç–æ—Ä—ã–º —é–∑–µ—Ä–æ–º
                main_page_1.logout(self.driver)
                main_page_1.auth_by_phone(TestData.phone_friend2, TestData.confirm_code)
                main_page_1.open_first_friend_first_wish()

            status = "üü¢"
        except Exception as e:
            #status = "üî¥"
            status = "üü°"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration, bug_link)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)

    @pytest.mark.wish_tests
    @pytest.mark.regress
    def test_add_partner_wish_from_catalog_visible_some(self):
        """BUG: –∂–¥–µ–º ID /-/issues/2287"""

        status = "üî¥"
        status = "üü°"
        bug_link = "/-/issues/2287"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ PARTNER –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ù–µ–∫–æ—Ç–æ—Ä—ã–º"
        test_ss_name = "test_add_partner_wish_from_catalog_visible_some"
        main_page_1 = MainPage(self.driver)

        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_delete_user(TestData.phone_friend2)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, "Firsty", "11", "1111")
        auth_controller.authenticate_and_register_user(TestData.phone_friend2, "Vtoroy", "12", "1111")
        auth_controller.authenticate_and_delete_user(TestData.phone_friend3)
        auth_controller.authenticate_and_register_user(TestData.phone_friend3, TestData.friend3_name, "12", "1111")
        try:
            # Auth
            time.sleep(20)
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
            time.sleep(2)

            main_page_1.register_new_user(self.driver, TestData.phone_friend2)

            assert main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR), \
                "Profile settings button not visible!"
            # TelegramReport.send_tg("PROFILE_SETTINGS_LOCATOR visible")

            # Refresh contacts for first user
            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(999)
                time.sleep(2)

            # Refresh contacts for second user
            with allure.step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(999)
                time.sleep(2)

            # Add wish from catalog
            with allure.step("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_CATALOG_BTN)
                # TelegramReport.send_tg("click(MainPage.CATALOG_BOTTOM_BUTTON_BOUNDS)")
                time.sleep(5)
                main_page_1.click(TestData.catalog_search_field)
                # TelegramReport.send_tg("CATALOG_CATEGORIES_BUTTON clicked on phone 1")
                time.sleep(2)
                main_page_1.send_keys_simple(TestData.partner_wish)
                time.sleep(2)
                main_page_1.click(TestData.catalog_search_field_result)
                time.sleep(5)
                main_page_1.click_by_uiautomator(TestData.CATEGORY_ITEM_1)
                # TelegramReport.send_tg("goods_list_first_good clicked on phone 1")
                time.sleep(2)
                main_page_1.scroll_until_visible(self.driver, MainPage.ADD_TO_WISHES_OR_BUY_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_TO_WISHES_OR_BUY_BUTTON)
                # TelegramReport.send_tg("ADD_TO_WISHES_BUTTON clicked on phone 1")
                time.sleep(2)

            # Add partner wish with settings
            with allure.step("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"):
                main_page_1.click_element_by_bounds(TestData.partner_wish_add_with_settings_button)
                time.sleep(2)
                main_page_1.click(TestData.partner_wish_add_button)
                time.sleep(2)

            # Select privacy option "Some"
            with allure.step("–í—ã–±–æ—Ä –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ù–µ–∫–æ—Ç–æ—Ä—ã–º"):
                main_page_1.click_by_uiautomator_desc_contains(MainPage.PRIVACY_SOME_DESC)
                time.sleep(4)

            # Select first friend
            with allure.step("–í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞"):
                main_page_1.click_by_uiautomator_desc_contains(TestData.choose_friends_first)
                time.sleep(2)

            # Click Done
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ"):
                main_page_1.click(MainPage.DONE_BUTTON)
                time.sleep(2)

            # Click Add
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å"):
                main_page_1.click(MainPage.ADD_BUTTON)
                time.sleep(2)

            # Check notification
            #with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"):
                # self.assertTrue(
                #     main_page_1.is_element_visible(MainPage.NOTIFICATION_WISH_ADDED),
                #     "NOTIFICATION_WISH_SUGGESTED not visible!"
                # )
                # self.assertTrue(
                #     main_page_1.is_element_invisible(MainPage.NOTIFICATION_WISH_ADDED),
                #     "NOTIFICATION_WISH_SUGGESTED visible!"
                # )

            # Check with second user
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(2)

                # Screenshot for second user
                action_taken = "_wish_visible_under_phone2"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                time.sleep(1)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            # Logout second user and login third user
            with allure.step("–†–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ö–æ–¥ —Ç—Ä–µ—Ç—å–∏–º"):
                time.sleep(2)
                main_page_1.logout(self.driver)
                time.sleep(2)

                main_page_1.auth_by_phone(TestData.phone_friend3, TestData.confirm_code)
                time.sleep(2)
                main_page_1.register_new_user(self.driver, TestData.phone_friend2)
                time.sleep(2)

            # Check with third user
            with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"):
                main_page_1.click(TestData.BOTTOM_FRIENDS_BTN_XP)
                time.sleep(2)
                main_page_1.swipe_down(999)
                time.sleep(4)
                main_page_1.click_by_uiautomator(TestData.CONTACTS_FRIEND_1)
                time.sleep(4)

                # Screenshot for third user
                action_taken = "_wish_not_visible_under_phone3"
                ss_etalon = MainPage.generate_filename("etalon", action_taken, test_ss_name)
                ss_run = MainPage.generate_filename("run", action_taken, test_ss_name)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_etalon)
                MainPage.take_element_screenshot_by_bounds(self.driver, TestData.main_screen_ss, ss_run)
                time.sleep(1)
                assert MainPage.compare_screenshots(ss_run, ss_etalon), f"Image comparison failed"

            status = "üü¢"
        except Exception as e:
            #status = "üî¥"
            status = "üü°"
            duration = time.time() - start_time
            main_page_1.exc_handle(test_name_this, report_url, e)
            collector.add_result(test_name_this, status, report_url, duration, bug_link)
            raise
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)

    @pytest.mark.wish_tests
    @pytest.mark.regress
    def test_add_partner_wish_from_catalog_description_filled(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ partner_ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"""

        status = "üü°"
        bug_link = "/-/issues/3237"
        report_url = self.driver.capabilities.get("testobject_test_report_url", "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        test_name_this = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ partner_ –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"
        test_ss_name = "test_add_partner_wish_from_catalog_description_filled"
        main_page_1 = MainPage(self.driver)
        auth_controller = AuthController()
        start_time = time.time()
        collector = ResultCollector()

        # Authenticate and delete users before the test
        auth_controller.authenticate_and_delete_user(TestData.phone_friend1)
        auth_controller.authenticate_and_register_user(TestData.phone_friend1, TestData.friend1_name, "11", "1111")

        try:
            # Auth
            time.sleep(20)
            main_page_1.auth_by_phone_with_skip_ob(TestData.phone_friend1, TestData.confirm_code)
            time.sleep(2)

            assert main_page_1.is_element_visible(MainPage.PROFILE_SETTINGS_LOCATOR), \
                "Profile settings button not visible!"
            # TelegramReport.send_tg("PROFILE_SETTINGS_LOCATOR visible")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞"):
                time.sleep(2)
                main_page_1.click(TestData.BOTTOM_CATALOG_BTN)
                # TelegramReport.send_tg("click(MainPage.CATALOG_BOTTOM_BUTTON_BOUNDS)")
            time.sleep(5)

            with allure.step("–í—ã–±–æ—Ä –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"):
                main_page_1.click(TestData.catalog_search_field)
                # TelegramReport.send_tg("CATALOG_CATEGORIES_BUTTON clicked on phone 1")
            time.sleep(2)

            with allure.step("–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.send_keys_simple(TestData.partner_wish)
            time.sleep(2)

            with allure.step("–í—ã–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞"):
                main_page_1.click(TestData.catalog_search_field_result)
            time.sleep(5)

            with allure.step("–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞"):
                main_page_1.click_by_uiautomator(TestData.CATEGORY_ITEM_1)
                # TelegramReport.send_tg("goods_list_first_good clicked on phone 1")
            time.sleep(2)

            with allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.scroll_until_visible(self.driver, MainPage.ADD_TO_WISHES_OR_BUY_BUTTON)
                time.sleep(2)
                main_page_1.click(MainPage.ADD_TO_WISHES_OR_BUY_BUTTON)
                # TelegramReport.send_tg("ADD_TO_WISHES_BUTTON clicked on phone 1")
            time.sleep(2)

            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ PARTNER —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"):
                main_page_1.click_element_by_bounds(TestData.partner_wish_add_with_settings_button)
            time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(TestData.partner_wish_add_button)
            time.sleep(2)

            # –æ–ø–∏—Å–∞–Ω–∏–µ
            with allure.step("–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"):
                main_page_1.click(TestData.wish_from_catalog_description_field)
            time.sleep(2)
            main_page_1.copy_paste_simple(TestData.long_description)
            time.sleep(2)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"):
                main_page_1.click(MainPage.ADD_BUTTON)
            time.sleep(2)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            with allure.step("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"):
                main_page_1.click(TestData.BOTTOM_WISHES_BTN)
            time.sleep(2)
            main_page_1.click_by_uiautomator(TestData.MY_WISHES_FIRST_WISH)
            time.sleep(2)
            main_page_1.swipe_up(1500)
            time.sleep(2)


            time.sleep(2)
            main_page_1.click_element_by_bounds(TestData.added_wish_details_of_description_button)
            time.sleep(2)


            time.sleep(2)
            main_page_1.swipe_up(1500)
            time.sleep(3)

            status = "üü¢"
        except Exception as e:
            status = "üü°"
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)
            raise e
        finally:
            duration = time.time() - start_time
            collector.add_result(test_name_this, status, report_url, duration, bug_link)
